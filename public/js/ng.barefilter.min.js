'use strict';
var application = angular.module('barefilterApp.application', []);
var dashboard = angular.module('barefilterApp.dashboard', []);
var admin = angular.module('barefilterApp.admin', []);
var members = angular.module('barefilterApp.members', []);
var barefilterApp = angular.module('barefilterApp', [
    'ui.router',
    'barefilterApp.application',
    'barefilterApp.dashboard',
    'barefilterApp.admin',
    'barefilterApp.members'
]);
'use strict';
barefilterApp.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');
    $urlRouterProvider.when('', '/');
    $stateProvider
        .state('dashboard', {
            url: '/',
            templateUrl: 'ng/modules/dashboard/view.html',
            controller: "dashboardController"
        });
}]);
application.factory('usersService', ["$window",
    function ($window) {
        var instance = {};
        instance.isAdmin = function () {
            return (user !== null && user.role_id === 1);
        };
        instance.isPartner = function () {
            return (user !== null && user.role_id === 2);
        };
        instance.isMember = function () {
            return (user !== null && user.role_id === 3);
        };
        instance.getLoggedUser = function () {
            return user;
        };
        instance.getLoggedUserDiscount = function () {
            return parseInt(user.properties.discount);
        };
        instance.updateLoggedUser = function (u) {
            user = u;
        };
        instance.getLoggedUserId = function () {
            return user.id;
        };
        instance.getLoggedUserFullName = function () {
            return user.first_name + " " + user.last_name;
        };
        return instance;
    }
]);
application.factory('apiRequest', [function () {
    var instance = {};
    instance.ajax = function (type, endpoint, data, onSuccess, onError) {
        $.ajax({
            type: type,
            url: config.server + endpoint,
            data: data,
            beforeSend: function (request) {
                request.setRequestHeader("X-CSRF-TOKEN", config.token);
            },
            success: function (response) {
                if (response.success) {
                    onSuccess(response.data);
                } else {
                    onError(response.error);
                }
            },
            error: onError
        });
    };
    return instance;
}]);
application.factory('barefilterAPI', ["usersAPI", "ordersAPI", "storesAPI", "buildingsAPI", "settingsAPI", "contentAPI",
    function (usersAPI, ordersAPI, storesAPI, buildingsAPI, settingsAPI, contentAPI) {
        var instance = {};
        instance.users = usersAPI;
        instance.orders = ordersAPI;
        instance.stores = storesAPI;
        instance.buildings = buildingsAPI;
        instance.settings = settingsAPI;
        instance.content = contentAPI;
        return instance;
    }
]);
application.factory("buildingsAPI", ['apiRequest', function (apiRequest) {
    var extended = {};
    var endpoint = "buildings";

    extended.profile = function (id, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/profile/" + id, {}, onSuccess, onError);
    };
    extended.mine = function (uid, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/mine/" + uid, {}, onSuccess, onError);
    };
    extended.add = function (building, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/add", building, onSuccess, onError);
    };
    extended.addFacility = function (facility, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/add-facility", facility, onSuccess, onError);
    };
    return extended;
}]);
application.factory("contentAPI", ['apiRequest', function (apiRequest) {
    var extended = {};
    var endpoint = "content";

    extended.all = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint, {}, onSuccess, onError);
    };

    extended.get = function (handle, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/" + handle, {}, onSuccess, onError);
    };
    extended.update = function (project, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update", project, onSuccess, onError);
    };
    return extended;
}]);
application.factory("ordersAPI", ['apiRequest', function (apiRequest) {
    var extended = {};
    var endpoint = "orders";
    extended.getDashboard = function (startDate, endDate, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/dashboard/" + startDate + "/" + endDate, {}, onSuccess, onError);
    };

    extended.getProductsList = function (startDate, endDate, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/productlist/" + startDate + "/" + endDate, {}, onSuccess, onError);
    };

    extended.search = function (id, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/search/" + id, {}, onSuccess, onError);
    };
    extended.getHistory = function (uid, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/history/" + uid, {}, onSuccess, onError);
    };
    extended.getTimeframedHistory = function (uid, sid, startDate, endDate, onSuccess, onError) {
        var url = endpoint + "/timeframed-history/" + uid + "/" + sid + "/" + startDate + "/" + endDate;
        apiRequest.ajax("GET", url, {}, onSuccess, onError);
    };
    extended.browseSubscriptions = function (startDate, endDate, onSuccess, onError) {
        var url = endpoint + "/browse-subscriptions/" + startDate + "/" + endDate;
        apiRequest.ajax("GET", url, {}, onSuccess, onError);
    };
    extended.getSubscriptionTypes = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/subscription-types", {}, onSuccess, onError);
    };
    extended.getOneTimeTransactionsByUserId = function (uid, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/one-time-transactions/" + uid, {}, onSuccess, onError);
    };
    extended.getSubscriptionsByUserId = function (uid, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/subscriptions/" + uid, {}, onSuccess, onError);
    };
    extended.transferSubscription = function (data, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/transfer-subscription", data, onSuccess, onError);
    };
    extended.cancelSubscription = function (data, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/cancel-subscription", data, onSuccess, onError);
    };
    extended.place = function (data, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/place", data, onSuccess, onError);
    };
    extended.delete = function (data, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete", data, onSuccess, onError);
    };
    extended.deleteSubscription = function (data, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete-subscription-order", data, onSuccess, onError);
    };
    extended.exportToExcel = function (uid, sid, startDate, endDate) {
        var url = endpoint + "/export-to-excel/" + uid + "/" + sid + "/" + startDate + "/" + endDate;
        window.location = config.server + url;
    };
    return extended;
}]);
application.factory("settingsAPI", ['apiRequest', function (apiRequest) {
    var extended = {};
    var endpoint = "settings";
    extended.get = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint, {}, onSuccess, onError);
    };

    extended.update = function (settings, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update", settings, onSuccess, onError);
    };
    return extended;
}]);
application.factory("storesAPI", ['apiRequest', function (apiRequest) {
    var extended = {};
    var endpoint = "stores";
    extended.search = function (q, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/search/" + q, {}, onSuccess, onError);
    };

    extended.productCheck = function (name, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/product-check", {
            name: name
        }, onSuccess, onError);
    };

    extended.categoryCheck = function (name, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/category-check", {
            name: name
        }, onSuccess, onError);
    };

    extended.cart = function (q, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/cart/" + q, {}, onSuccess, onError);
    };

    extended.getDiscounts = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/discounts", {}, onSuccess, onError);
    };
    extended.createDiscount = function (discount, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/create-discount", discount, onSuccess, onError);
    };
    extended.updateDiscount = function (discount, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update-discount", discount, onSuccess, onError);
    };

    extended.searchCategories = function (q, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/search-categories/" + q, {}, onSuccess, onError);
    };
    extended.getCategories = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/categories", {}, onSuccess, onError);
    };
    extended.createCategory = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/create-category", category, onSuccess, onError);
    };
    extended.updateCategory = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update-category", category, onSuccess, onError);
    };
    extended.deleteCategory = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete-category", category, onSuccess, onError);
    };

    extended.getProducts = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/products", {}, onSuccess, onError);
    };
    extended.createProduct = function (product, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/create-product", product, onSuccess, onError);
    };
    extended.updateProduct = function (product, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update-product", product, onSuccess, onError);
    };

    extended.getProductImageUploadURL = function () {
        return config.server + endpoint + "/add-product-image";
    };

    extended.deleteProductImage = function (id, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete-product-image", {
            id: id
        }, onSuccess, onError);
    };

    extended.deleteProduct = function (id, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete-product", {
            id: id
        }, onSuccess, onError);
    }

    extended.getCategoryImageUploadURL = function () {
        return config.server + endpoint + "/category-image";
    };

    extended.getCategoryItemImageUploadURL = function () {
        return config.server + endpoint + "/category-item-image";
    };

    extended.stockCheck = function (product_stock, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/check-stock", { product_stock: product_stock }, onSuccess, onError);
    };

    extended.getPatnerLogoUploadURL = function () {
        return config.server + endpoint + "/partner-logo";
    };

    extended.getCategoryBannerImageUploadURL = function () {
        return config.server + endpoint + "/category-banner-image";
    };

    extended.getCategoryCatImageUploadURL = function () {
        return config.server + endpoint + "/category-cat-image";
    };
    extended.getSubCategoryBannerImageUploadURL = function () {
        return config.server + endpoint + "/sub-category-banner-image";
    };
    extended.getSubCategoryCatImageUploadURL = function () {
        return config.server + endpoint + "/sub-category-cat-image";
    };
    extended.getMainCategoryBannerImageUploadURL = function () {
        return config.server + endpoint + "/main-category-banner-image";
    };
    extended.getMainCategoryCatImageUploadURL = function () {
        return config.server + endpoint + "/main-category-cat-image";
    };
    extended.getParentID = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/getParentId", category, onSuccess, onError);
    };
    extended.getSubID = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/getSubID", category, onSuccess, onError);
    };
    extended.getMainCategories = function (onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/maincategories", {}, onSuccess, onError);
    };
    extended.getSubCategories = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/subcategories", category, onSuccess, onError);
    };
    extended.saveSubCategory = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/save-subcategory", category, onSuccess, onError);
    };
    extended.updateCategory = function (category, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update-category", category, onSuccess, onError);
    };
    extended.categoryCheck = function (name, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/category-check", { name: name }, onSuccess, onError);
    };
    extended.MainCategories = function (type, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/mainTypecategories", type, onSuccess, onError);
    };
    return extended;
}]);
application.factory("usersAPI", ['apiRequest', function (apiRequest) {
    var extended = {};
    var endpoint = "users";
    extended.searchMembers = function (q, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/members/" + q, {}, onSuccess, onError);
    };
    extended.searchPartners = function (q, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/partners/" + q, {}, onSuccess, onError);
    };

    extended.profile = function (uid, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/profile/" + uid, {}, onSuccess, onError);
    };

    extended.createMember = function (payload, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/add-member", payload, onSuccess, onError);
    };

    extended.createPartner = function (payload, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/add-partner", payload, onSuccess, onError);
    };

    extended.update = function (user, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/update", user, onSuccess, onError);
    };
    extended.delete = function (data, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete", data, onSuccess, onError);
    };
    extended.changePassword = function (password, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/password", password, onSuccess, onError);
    };

    extended.myAddresses = function (uid, onSuccess, onError) {
        apiRequest.ajax("GET", endpoint + "/addresses/" + uid, {}, onSuccess, onError);
    };
    extended.addAddress = function (address, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/add-address", address, onSuccess, onError);
    };
    extended.deleteAddress = function (address, onSuccess, onError) {
        apiRequest.ajax("POST", endpoint + "/delete-address", address, onSuccess, onError);
    };
    return extended;
}]);
'use strict';
application.directive('barefilterSidebar', [function () {
    return {
        templateUrl: 'ng/directives/sidebar/view.html',
        scope: {},
        controller: function ($scope) {

        }
    };
}]);
'use strict';
admin.controller("categoriesController", ["$rootScope", "$scope", 'barefilterAPI', function ($rootScope, $scope, barefilterAPI) {
    var modal = "#create-category-modal";
    var subCategoryDescription = modal + " #subCategoryDescription";
    var subsubCategoryDescription = modal + " #subsubCategoryDescription";
    var viewing = "fields";
    $rootScope.title = "Kategorier";
    $scope.searchQuery = "";
    $scope.categories = [];
    $scope.allCategories = [];
    $scope.allMainCategories = [];
    $scope.allSubCategories = [];
    $scope.category = {};
    $scope.subCategory = {};
    $scope.subsubCategory = {};
    $scope.mainCategory = {};
    $scope.loading = false; $scope.canAddCategory = true; $scope.isSubCategory = false;
    $scope.is_subsubable = false; $scope.is_sub_banner_image = false; $scope.is_sub_cat_image = false; $scope.is_sub_sub_banner_image = false; $scope.is_sub_sub_cat_image = false;
    $scope.sectionType = false; $scope.sectionMainInput = false; $scope.sectionMainDes = false; $scope.sectionMainImg = false; $scope.sectionMain = false; $scope.sectionSub = false; $scope.sectionSubType = false; $scope.sectionSubDes = false; $scope.sectionSubImg = false; $scope.sectionSubSub = false; $scope.sectionSubSubDes = false; $scope.sectionSubSubImg = false;
    $scope.is_subsubcategory = false; $scope.is_subcategory = false; $scope.is_edit_creat = true; $scope.is_editsave = true;
    $scope.is_sub_banner_button = false; $scope.is_sub_button = false; $scope.is_sub_button_able = false; $scope.is_sub_sub_cat_able = false; $scope.is_main_banner_able = false; $scope.is_main_cat_able = false;
    $scope.is_subsub_create = false;
    $scope.isViewing = function (test) {
        return viewing === test;
    };

    $scope.view = function (target, create) {
        if (create == "main_banner_images") {
            $scope.is_main_banner_image = true;
            $scope.is_main_cat_image = false;
            $scope.is_sub_banner_image = false;
            $scope.is_sub_cat_image = false;
            $scope.is_sub_sub_banner_image = false;
            $scope.is_sub_sub_cat_image = false;
        }
        else if (create == "main_cat_images") {
            $scope.is_main_banner_image = false;
            $scope.is_main_cat_image = true;
            $scope.is_sub_banner_image = false;
            $scope.is_sub_cat_image = false;
            $scope.is_sub_sub_banner_image = false;
            $scope.is_sub_sub_cat_image = false;
        }
        else if (create == "sub_banner_images") {
            $scope.is_main_banner_image = false;
            $scope.is_main_cat_image = false;
            $scope.is_sub_banner_image = true;
            $scope.is_sub_cat_image = false;
            $scope.is_sub_sub_banner_image = false;
            $scope.is_sub_sub_cat_image = false;
        }
        else if (create == "sub_cat_images") {
            $scope.is_main_banner_image = false;
            $scope.is_main_cat_image = false;
            $scope.is_sub_banner_image = false;
            $scope.is_sub_cat_image = true;
            $scope.is_sub_sub_banner_image = false;
            $scope.is_sub_sub_cat_image = false;
        }
        else if (create == "sub_sub_banner_images") {
            $scope.is_main_banner_image = false;
            $scope.is_main_cat_image = false;
            $scope.is_sub_banner_image = false;
            $scope.is_sub_cat_image = false;
            $scope.is_sub_sub_banner_image = true;
            $scope.is_sub_sub_cat_image = false;
        }
        else if (create == "sub_sub_cat_images") {
            $scope.is_main_banner_image = false;
            $scope.is_main_cat_image = false;
            $scope.is_sub_banner_image = false;
            $scope.is_sub_cat_image = false;
            $scope.is_sub_sub_banner_image = false;
            $scope.is_sub_sub_cat_image = true;
        }
        $scope.create = create;
        viewing = target;
        if (target == 'images') {
            setTimeout(function () {
                initDropZone(create);
            }, 100);
        }
    };

    $scope.triggerSearch = function () {
        search();
    };

    $scope.hasCategories = function () {
        return $scope.categories.length > 0;
    };

    $scope.delete = function (category) {
        if (confirm("Are you sure you want to delete this category?")) {
            barefilterAPI.stores.deleteCategory({ cid: category.id }, function (data) {
                getCategories();
                search();
            }, function () { });
        }
    };
    //find sub cat name in db
    $scope.subCategoryCheck = function () {
        $scope.is_edit_creat = true;
        if ($scope.isAddingNew) {
            var name = $scope.subCategory.name;
            barefilterAPI.stores.categoryCheck(name, function (response) {
                $scope.canAddCategory = true;
                $scope.$apply();
            }, function () {
                $scope.canAddCategory = false;
                $scope.$apply();
            })
        }
        $scope.is_subcategory = true;
    };

    //find subsub cat name in db
    $scope.subsubCategoryCheck = function () {
        $scope.is_editsave = true;
        if ($scope.isAddingNew) {
            var name = $scope.subsubCategory.name;
            barefilterAPI.stores.categoryCheck(name, function (response) {
                $scope.canAddCategory = true;
                $scope.$apply();
            }, function () {
                $scope.canAddCategory = false;
                $scope.$apply();
            })
        }
        $scope.is_subsubcategory = true;
    };
    //new button clicked
    $scope.addNew = function () {
        $scope.isAddingNew = true;
        $scope.sectionType = true; $scope.sectionMain = true; $scope.sectionSub = true; $scope.sectionSubType = false; $scope.sectionSubDes = true; $scope.sectionSubImg = true; $scope.sectionSubSub = true; $scope.sectionSubSubDes = true; $scope.sectionSubSubImg = true; $scope.sectionEditImg = false;
        $scope.subCategory = getDefaultCategory();
        $scope.selectedType = $scope.subCategory.type_id;
        $(modal).modal('show');
    };
    //subcategory create & save -new
    $scope.saveSubCategory = function () {
        $scope.subCategory.type_id = $scope.selectedType;
        if ($scope.isAddingNew) {
            if ($scope.is_edit_creat) {
                var send_data = { 'type': 'create', 'data': $scope.subCategory }
            } else {
                var send_data = { 'type': 'update', 'data': $scope.subCategory }
            }
        } else {
            var send_data = { 'type': 'update', 'data': $scope.subCategory }
        }
        if ($scope.subCategory.description == "") {
            alert("Vennligst fyll ut beskrivelsesfeltet!");
        } else {
            $scope.is_sub_banner_button = true; $scope.is_sub_cat_button = true; $scope.is_sub_button_able = true;
            barefilterAPI.stores.createCategory(send_data, function (data) {
                $scope.subCategory = data;
                $scope.searchQuery = data.name;
                if (send_data['type'] = 'update') { alert("Kategori er oppdatert!"); } else if (send_data['type'] = 'create') { alert("Kategori er opprettet!"); }
            }, function () { });
        }
    };
    //subsubcategory create & subsubcategory input-new
    $scope.addNewSubCategory = function () {
        if ($scope.is_sub_button_able) {
            $scope.is_subsub_create = true; $scope.is_subsubable = true; $scope.sectionSubSub = true; $scope.sectionSubSubDes = true; $scope.sectionSubSubImg = true;
        }
        $scope.subsubCategory = getDefaultCategory();
        $scope.subsubCategory.parent_id = $scope.subCategory.id;
    };
    //subsubcategory save-new
    $scope.save = function () {
        $scope.is_sub_sub_cat_able = true;
        if ($scope.is_subsub_create) {
            var send_data = { 'type': 'create', 'data': $scope.subsubCategory }
        } else {
            var send_data = { 'type': 'update', 'data': $scope.subsubCategory }
        }
        if ($scope.subsubCategory.description == "") {
            alert("Vennligst fyll ut beskrivelsesfeltet!");
        } else {
            barefilterAPI.stores.createCategory(send_data, function (data) {
                $scope.subsubCategory = data;
                if (data.name != null) {
                    $scope.searchQuery = data.name;
                }
                if (send_data['type'] = 'update') { alert("Kategori er oppdatert!"); } else if (send_data['type'] = 'create') { alert("Kategori er opprettet!"); }
                search();
            }, function () { });
        }
    };
    //edit button pressed
    $scope.edit = function (category) {
        $scope.isAddingNew = false;
        $scope.category = category;
        $scope.category.parent_id = $scope.category.parent_id.toString();
        if ($scope.category.parent_id != '0') {
            var payload = angular.copy($scope.category);
            barefilterAPI.stores.getParentID(payload, function (data) {
                if (data.sub.type == "sub") {
                    if (data.sub.data != null) {
                        $scope.isSubCategory = true;
                        $scope.sectionType = false; $scope.sectionMainInput = false; $scope.sectionMainDes = false; $scope.sectionMainImg = false; $scope.sectionMain = true; $scope.sectionSub = true; $scope.sectionSubType = false; $scope.sectionSubDes = true; $scope.sectionSubImg = true; $scope.sectionSubSub = false; $scope.sectionSubSubDes = false; $scope.sectionSubSubImg = false;
                        $scope.subCategory = Object.assign({}, data.sub.data);
                        $scope.selectedType = data.sub.data.type_id;
                        $scope.$apply();
                        $(modal).modal('show');
                    }
                }
                if (data.sub_sub.type == "sub_sub") {
                    if (data.sub_sub.data != null) {
                        $scope.sectionType = false; $scope.sectionMain = false; $scope.sectionSub = false; $scope.sectionSubType = true; $scope.sectionSubDes = false; $scope.sectionSubImg = false; $scope.sectionSubSub = true; $scope.sectionSubSubDes = true; $scope.sectionSubSubImg = true;
                        $scope.is_subsubable = true;
                        $scope.subsubCategory = Object.assign({}, data.sub_sub.data);
                        var payload = angular.copy($scope.subsubCategory);
                        barefilterAPI.stores.getSubCategories(payload, function (data) {
                            data.unshift({ name: "None", id: 0, type_id: 1 });
                            data.unshift({ name: "None", id: 0, type_id: 2 });
                            $scope.allSubCategories = data;
                            $scope.$apply();
                            $(modal).modal('show');
                        }, function () { });
                    }
                }
            }, function () { });
        }
        else if ($scope.category.parent_id == '0') {
            $scope.sectionType = true; $scope.sectionMainInput = true; $scope.sectionMainDes = true; $scope.sectionMainImg = true; $scope.sectionMain = false; $scope.sectionSub = false; $scope.sectionSubType = false; $scope.sectionSubDes = false; $scope.sectionSubImg = false; $scope.sectionSubSub = false; $scope.sectionSubSubDes = false; $scope.sectionSubSubImg = false;
            $scope.is_main_banner_able = true; $scope.is_main_cat_able = true;
            $scope.selectedType = "1";
            $scope.mainCategory = $scope.category;
            $(modal).modal('show');
        }
    }
    //save only maincategory
    $scope.saveMainCategory = function () {
        var send_data = { 'type': 'update', 'data': $scope.mainCategory }
        if ($scope.mainCategory.description == "") {
            alert("Vennligst fyll ut beskrivelsesfeltet!");
        } else {
            barefilterAPI.stores.createCategory(send_data, function (data) {
                $scope.mainCategory = data;
                $scope.searchQuery = data.name;
                alert("Kategori er oppdatert!");
            }, function () { });
        }
    };

    $scope.onTypeChange = function () {
        if ($scope.selectedType == "1") {
            $scope.selectedType = "2";
        } else {
            $scope.selectedType = "1";
        }
        barefilterAPI.stores.MainCategories(type, function (data) {
            data.unshift({ name: "None", id: 0, type_id: 1 });
            data.unshift({ name: "None", id: 0, type_id: 2 });
            $scope.allMainCategories = data;
            $scope.$apply();
        }, function () { });
    };

    var getDefaultCategory = function () {
        return {
            name: "",
            type_id: "1",
            parent_id: "0",
            description: "",
            banner_img: "-",
            cat_img: "-",
            meta_title: "",
            meta_description: "",
            meta_keywords: ""
        }
    };

    var onImageUploadSuccess = function (file, response) {
        if (response.data.label == "mainBanner") {
            if (response.success) {
                $scope.subCategory.banner_img = response.data.url;
                $scope.$apply();
            }
        }
        else if (response.data.label == "mainCat") {
            if (response.success) {
                $scope.subCategory.cat_img = response.data.url;
                $scope.$apply();
            }
        }
        else if (response.data.label == "subBanner") {
            if (response.success) {
                $scope.subsubCategory.banner_img = response.data.url;
                $scope.$apply();
            }
        }
        else if (response.data.label == "subCat") {
            if (response.success) {
                $scope.subsubCategory.cat_img = response.data.url;
                $scope.$apply();
                $(modal).modal('hide');
                search();
                getMainCategories();
                getCategories();
            }
        }
        else if (response.data.label == "mainCategoryBanner") {
            if (response.success) {
                $scope.mainCategory.banner_img = response.data.url;
                $scope.$apply();
            }
        }
        else if (response.data.label == "mainCategoryCat") {
            if (response.success) {
                $scope.mainCategory.cat_img = response.data.url;
                $scope.$apply();
                $(modal).modal('hide');
                search();
                getCategories();
            }
        }
    };

    var onSendingImage = function (file, xhr, formData) {
        if ($scope.create == "sub_banner_images") {
            formData.append("name", $scope.subCategory.name);
        }
        else if ($scope.create == "sub_cat_images") {
            formData.append("name", $scope.subCategory.name);
        }
        else if ($scope.create == "sub_sub_banner_images") {
            formData.append("name", $scope.subsubCategory.name);
        }
        else if ($scope.create == "sub_sub_cat_images") {
            formData.append("name", $scope.subsubCategory.name);
        }
        else if ($scope.create == "main_banner_images") {
            formData.append("name", $scope.mainCategory.name);
        }
        else if ($scope.create == "main_cat_images") {
            formData.append("name", $scope.mainCategory.name);
        }
    };

    var initDropZone = function (create) {
        var dropzone;
        if (create == "sub_banner_images") {
            dropzone = new Dropzone("#image-uploader", {
                url: barefilterAPI.stores.getCategoryBannerImageUploadURL(),
                acceptedFiles: 'image/png, image/jpeg'
            });
        } else
            if (create == "sub_cat_images") {
                dropzone = new Dropzone("#image-uploader", {
                    url: barefilterAPI.stores.getCategoryCatImageUploadURL(),
                    acceptedFiles: 'image/png, image/jpeg'
                });
            } else
                if (create == "sub_sub_banner_images") {
                    dropzone = new Dropzone("#image-uploader", {
                        url: barefilterAPI.stores.getSubCategoryBannerImageUploadURL(),
                        acceptedFiles: 'image/png, image/jpeg'
                    });
                } else
                    if (create == "sub_sub_cat_images") {
                        dropzone = new Dropzone("#image-uploader", {
                            url: barefilterAPI.stores.getSubCategoryCatImageUploadURL(),
                            acceptedFiles: 'image/png, image/jpeg'
                        });
                    }
                    else if (create == "main_cat_images") {
                        dropzone = new Dropzone("#image-uploader", {
                            url: barefilterAPI.stores.getMainCategoryCatImageUploadURL(),
                            acceptedFiles: 'image/png, image/jpeg'
                        });
                    }
                    else if (create == "main_banner_images") {
                        dropzone = new Dropzone("#image-uploader", {
                            url: barefilterAPI.stores.getMainCategoryBannerImageUploadURL(),
                            acceptedFiles: 'image/png, image/jpeg'
                        });
                    }

        dropzone.on("sending", onSendingImage);
        dropzone.on("success", onImageUploadSuccess);
    };

    var search = function () {
        $scope.loading = true;
        barefilterAPI.stores.searchCategories($scope.searchQuery, function (data) {
            $scope.categories = data;
            $scope.loading = false;
            $scope.$apply();
        }, function () {

        });
    };
    var getCategories = function () {
        barefilterAPI.stores.getCategories(function (data) {
            data.unshift({ name: "None", id: 0, type_id: 1 });
            data.unshift({ name: "None", id: 0, type_id: 2 });
            $scope.allCategories = data;
            $scope.$apply();
        }, function () {

        });
    };
    var getMainCategories = function () {
        barefilterAPI.stores.getMainCategories(function (data) {
            data.unshift({ name: "None", id: 0, type_id: 1 });
            data.unshift({ name: "None", id: 0, type_id: 2 });
            $scope.allMainCategories = data;
            $scope.$apply();
        }, function () { });
    };
    var init = function () {
        search();
        getMainCategories();
        getCategories();
    };
    init();
}]);
'use strict';
admin.controller("discountsController", ["$rootScope", "$scope", "$filter", "barefilterAPI", function ($rootScope, $scope, $filter, barefilterAPI) {
    $rootScope.title = "Rabattkoder";
    $scope.discounts = [];
    $scope.isAddingNew = false;
    $scope.selectedDiscount = {};
    var modal = "#discount-settings-modal";

    $scope.hasDiscounts = function () {
        return $scope.discounts.length > 0;
    };

    $scope.addNew = function () {
        $scope.isAddingNew = true;
        $scope.selectedDiscount = getDefaultDiscount();
        $(modal).modal('show');
    };

    $scope.edit = function (discount) {
        $scope.isAddingNew = false;
        $scope.selectedDiscount = discount;
        $(modal).modal('show');
    };


    $scope.save = function () {
        $(modal).modal('hide');
        var payload = angular.copy($scope.selectedDiscount);
        payload.start_date = formatDate(payload.start_date);
        payload.end_date = formatDate(payload.end_date);
        barefilterAPI.stores.createDiscount(JSON.parse(angular.toJson(payload)), function (data) {
            loadDiscounts();
        }, function () { });
    };

    $scope.update = function () {
        $(modal).modal('hide');
        var payload = angular.copy($scope.selectedDiscount);
        payload.start_date = formatDate(payload.start_date);
        payload.end_date = formatDate(payload.end_date);
        barefilterAPI.stores.updateDiscount(JSON.parse(angular.toJson(payload)), function (data) { }, function () { });
    };

    var formatDate = function (date) {
        return $filter('date')(date, "yyyy-MM-dd HH:mm:ss");
    }

    var getDefaultDiscount = function () {
        return {
            active: 1,
            name: "",
            code: "",
            value: 0,
            start_date: "",
            end_date: ""
        }
    };

    var loadDiscounts = function () {
        barefilterAPI.stores.getDiscounts(function (data) {
            $scope.discounts = data.map(function (d) {
                d.start_date = new Date(d.start_date);
                d.end_date = new Date(d.end_date);
                return d;
            });
            $scope.$apply();
        }, function () { });
    }

    var init = function () {
        loadDiscounts();
    };
    init();
}]);
'use strict';
admin.directive('memberCheckout', ["$state", "barefilterAPI", function ($state, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/admin/member/checkout.html',
        scope: {
            user: '='
        },
        controller: function ($scope) {
            var products, shippingMethod, paymentMethod;
            var succeededPlacingOrder = false;
            $scope.totals = null;
            $scope.$on("totalsUpdate", function (e, data) {
                var totals = data.totals;
                products = data.cart;
                data.shippingMethod.price = 98;
                if (data.paymentMethod !== undefined && data.shippingMethod !== undefined) {
                    shippingMethod = data.shippingMethod;
                    paymentMethod = data.paymentMethod;
                    totals.subtotal += data.paymentMethod.price;
                    totals.subtotal += data.shippingMethod.price;
                    totals.shipping = data.shippingMethod.price;
                }
                totals.tax = Math.round(totals.subtotal * 0.25); // dett inkluderer 25%
                //totals.total = totals.subtotal + totals.tax;
                totals.total = totals.subtotal;
                // console.log(config);
                if (config.free_shipping && totals.subtotal > config.free_shipping_amount) {
                    totals.total -= shippingMethod.price;
                    totals.shipping = 0;
                }
                $scope.totals = totals;
                $scope.cart = products;
            });


            $scope.hasAnything = function () {
                return $scope.totals !== null && $scope.totals.total > 0;
            };

            $scope.hasFailedPlacingOrder = function () {
                return ($scope.placingOrder) ? false : !succeededPlacingOrder;
            };

            $scope.hasSuccededPlacingOrder = function () {
                return ($scope.placingOrder) ? false : succeededPlacingOrder;
            };

            $scope.placeOrder = function () {
                var payload = getPayload();
                $scope.placingOrder = true;
                $scope.hasPlacedOrder = true;
                barefilterAPI.orders.place(payload, onOrderPlaced, function () {
                    $scope.placingOrder = false;
                    succeededPlacingOrder = false;
                    $scope.$apply();
                })
            };


            var onOrderPlaced = function (data) {
                $scope.placingOrder = false;
                succeededPlacingOrder = true;
                $scope.$apply();
                setTimeout(function () {
                    $scope.$emit("orderPlaced");
                }, 1500);
            };

            var getPayload = function () {
                return {
                    netaxept: false,
                    uid: $scope.user.id,
                    tas: shippingMethod.handle,
                    shipping_method_id: shippingMethod.id,
                    payment_method_id: paymentMethod.id,
                    promo_code: '',
                    products: products.map(function (p) {
                        return {
                            id: p.id,
                            subscription_id: p.subscription_id,
                            total: p.total
                        }
                    }),
                    addresses: {
                        same: true,
                        shipping: $scope.user.shipping,
                        billing: null
                    },
                    summary: $scope.totals
                };
            };
        }
    };
}]);
'use strict';
admin.controller("memberController", ["$rootScope", "$scope", "$stateParams", 'barefilterAPI', function ($rootScope, $scope, $stateParams, barefilterAPI) {
    $rootScope.title = "Member";

    var paymentMethod, shippingMethod;
    $scope.user = {
        orders: []
    };
    $scope.loading = false;
    $scope.creatingOrder = false;
    $scope.edit = false;

    $scope.hasOrders = function () {
        return $scope.user.orders.length > 0;
    };

    $scope.getPurchaseDate = function (date) {
        return new Date(date);
    };

    $scope.getPhone = function (user) {
        return (user.phone !== "") ? user.phone : "No phone";
    };


    $scope.createOrder = function () {
        $scope.creatingOrder = true;
    };



    $scope.editInfo = function () {
        $scope.edit = !$scope.edit;
        if ($scope.edit) {

        }
    }

    $scope.delete = function (order) {
        if (confirm("Are you sure you want to delete this order?")) {
            barefilterAPI.orders.delete({
                oid: order.id
            }, function (data) {
                loadProfile();
            }, function () { });
        }
    };

    $scope.cancelOrderCreation = function () {
        $scope.creatingOrder = false;
    };

    $scope.$on("cartUpdate", function (e, data) {
        data.paymentMethod = paymentMethod;
        data.shippingMethod = shippingMethod;
        $scope.$broadcast("totalsUpdate", data);
    });

    $scope.$on("orderPlaced", function (e, data) {
        $scope.creatingOrder = false;
        loadProfile();
    });

    var loadStoreDefaultSettings = function () {
        barefilterAPI.stores.cart('1', function (data) {
            $scope.subscriptions = data.subscriptions;

            data.payment_methods.forEach(function (method) {
                if (method.handle === "faktura") {
                    paymentMethod = method;
                }
            });
            data.shipping_methods.forEach(function (method) {
                method.price = (config.free_shipping) ? 0 : method.price;
                if (method.handle === "bring_bedr_dor_dor") {
                    shippingMethod = method;
                }
            });
        }, function () { });
    };

    var loadProfile = function () {
        $scope.loading = true;
        barefilterAPI.users.profile($stateParams.id, function (data) {
            $scope.loading = false;
            $scope.user = data;
            $scope.$apply();
        }, function () {

        });
    };
    var init = function () {
        loadProfile();
        loadStoreDefaultSettings();
    };
    init();
}]);
'use strict';
admin.directive('memberStore', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/admin/member/store.html',
        scope: {
            subscriptions: '='
        },
        controller: function ($scope) {
            var viewing = 0;
            var getTotals = function () {
                return {
                    goods: 0,
                    shipping: 0,
                    discount: 0,
                    subtotal: 0,
                    total: 0,
                    tax: 0
                };
            };

            $scope.searchQuery = "";
            $scope.cart = [];
            $scope.results = [];
            $scope.totals = getTotals();

            $scope.search = function () {
                barefilterAPI.stores.search($scope.searchQuery, function (data) {
                    $scope.results = data.products;
                    $scope.$apply();
                }, function () {

                });
            };
            $scope.hasResults = function () {
                return $scope.results.length > 0;
            };
            $scope.addToCart = function (product) {
                var sub = getSubscription(1);
                product.selectedSubscription = sub;
                product.subscription_id = sub.id;
                product.total = 1;
                product.cost = product.price * product.total;
                product.cost = product.cost - Math.round(product.cost * sub.discount * 0.01);
                $scope.results = [];
                $scope.searchQuery = "";
                $scope.cart.push(product);
                $scope.updateCart();
            };
            $scope.updateProduct = function (item) {
                var discount, cost;
                if (item.total <= 0) {
                    item.total = 1;
                }
                cost = item.price * item.total;
                item.subscription_id = item.selectedSubscription.id;
                discount = item.selectedSubscription.discount;
                item.cost = cost - Math.round(cost * discount / 100);
                $scope.updateCart();
            };
            $scope.removeFromCart = function (product) {
                $scope.cart.splice($scope.cart.indexOf(product), 1);
                $scope.updateCart();
            };
            $scope.updateCart = function () {
                var totals = getTotals();
                $scope.cart.forEach(function (p) {
                    totals.goods += p.price * p.total;
                    totals.discount += (p.price * p.total - p.cost);
                    totals.subtotal += p.cost;
                });

                //totals.discount = Math.round(totals.goods * discount);
                totals.subtotal = totals.goods - totals.discount;
                $scope.totals = totals;
                $scope.$emit("cartUpdate", {
                    cart: $scope.cart,
                    totals: $scope.totals
                });
            };
            $scope.hasProductsInCart = function () {
                return $scope.cart.length > 0;
            };

            var getSubscription = function (id) {
                var sub = {};
                for (var i = 0; i < $scope.subscriptions.length; i++) {
                    if ($scope.subscriptions[i].id === id) {
                        sub = $scope.subscriptions[i];
                        break;
                    }
                }
                return sub;
            }
        }
    };
}]);
'use strict';
admin.controller("membersController", ["$rootScope", "$scope", "$state", 'barefilterAPI', function ($rootScope, $scope, $state, barefilterAPI) {
    $rootScope.title = "Members";
    $scope.searchQuery = "";
    $scope.users = [];
    $scope.loading = false;

    var modal = "#create-product-modal";

    $scope.triggerSearch = function () {
        search();
    };

    $scope.hasMembers = function () {
        return $scope.users.length > 0;
    };

    $scope.getPhone = function (user) {
        return (user.phone !== "") ? user.phone : "No phone";
    };

    // $scope.$watch('searchQuery', function (val) {

    //     search();
    // });

    $scope.delete = function (user) {
        if (confirm("Are you sure you want to delete this member?")) {
            barefilterAPI.users.delete({
                uid: user.id
            }, function (data) {
                search();
            }, function () { });
        }
    };

    $scope.addNew = function () {
        $scope.isAddingNew = true;
        $scope.useSame = true;
        $scope.member = getDefaultUser();
        $scope.shipping = getDefaultAddress();
        $scope.billing = getDefaultAddress();
        $(modal).modal('show');
    };

    $scope.save = function () {
        $(modal).modal('hide');
        var payload = {
            user: $scope.member,
            addresses: {
                same: ($scope.useSame),
                shipping: $scope.shipping,
                billing: ($scope.useSame) ? null : $scope.billing
            }
        };
        barefilterAPI.users.createMember(payload, function (data) {
            $state.go('member', {
                id: data.id
            });
        }, function () { });
    };

    var getDefaultUser = function () {
        return {
            first_name: "",
            last_name: "",
            email: "",
            phone: ""
        }
    };

    var getDefaultAddress = function () {
        return {
            first_name: "",
            last_name: "",
            email: "",
            phone: "",
            street_address: "",
            postal_code: "",
            city: ""
        }
    };

    var search = function () {
        if (!$scope.loading) {
            $scope.loading = true;
            barefilterAPI.users.searchMembers($scope.searchQuery, function (data) {
                $scope.loading = false;
                $scope.users = data;
                $scope.$apply();
            }, function () {

            });
        } else {
            setTimeout(search, 100);
        }

    };
    var init = function () {
        search();
    };
    init();
}]);
'use strict';
admin.controller("pageController", ["$rootScope", "$scope", "$sce", "$stateParams", "barefilterAPI", function ($rootScope, $scope, $sce, $stateParams, barefilterAPI) {
    $rootScope.title = "Rediger side";
    $scope.page = {};
    $scope.loading = false;
    $scope.updating = false;
    $scope.faq = {};
    $scope.customer = [];
    $scope.sections = [];
    $scope.section = undefined;
    var content = {},
        pageSection = "#page-section",
        editFaq = "#editFaq",
        addFaq = "#addFaq",
        selectedFaqCatId = -1,
        selectedAnswerId = -1;
    $scope.update = function () {
        $scope.updating = true;
        $scope.page.content = parseSections();
        if ($scope.page.content !== '{}') {
            barefilterAPI.content.update($scope.page, function (page) {
                $scope.updating = false;
                $scope.$apply();
            }, function () {
                $scope.updating = false;
                $scope.$apply();
            });
        }
    };

    $scope.hasSections = function () {
        return $scope.sections.length > 0;
    };
    $scope.isEditingSection = function (section) {
        return $scope.section === section;
    };
    $scope.editSection = function (section) {
        if ($scope.section !== undefined) {
            $scope.section.text = $(pageSection).summernote('code');
        }
        $scope.section = section;
        $(pageSection).summernote('code', section.text);
    };

    $scope.addCatFAQ = function () {
        $scope.customer.push({
            category: $scope.faq.addCategoryFAQ,
            answer: []
        });
        $scope.faq.addCategoryFAQ = "";
    };


    $scope.editCatFAQ = function () {
        $scope.customer[selectedFaqCatId].category = $scope.faq.editCategoryFAQ;
    };

    $scope.selectFaqCat = function (key) {
        selectedFaqCatId = key;
        $scope.faq.editCategoryFAQ = $scope.customer[key].category;
    };

    $scope.selectQuestion = function (catFaqId, faqId) {
        selectedFaqCatId = catFaqId;
        selectedAnswerId = faqId;
        $scope.faq.editQuestion = $scope.customer[selectedFaqCatId].answer[selectedAnswerId].question;
        $(editFaq).summernote('code', $scope.customer[selectedFaqCatId].answer[selectedAnswerId].answer);
    };

    $scope.getHtml = function (html) {
        return $sce.trustAsHtml(html);
    };

    $scope.addQuestion = function () {
        if (selectedFaqCatId != -1) {
            $scope.customer[selectedFaqCatId].answer.push({
                question: $scope.faq.addQuestion,
                answer: $(addFaq).summernote('code')
            });
            $scope.faq.addQuestion = "";
            $(addFaq).summernote('code', '');
        } else {
            alert("Vennligst velg FAQ kategori");
        }
    };

    $scope.deleteQuestion = function () {
        if (selectedAnswerId != -1 && selectedFaqCatId != -1) {
            if (confirm("Are you sure you want to delete this partner?")) {
                $scope.customer[selectedFaqCatId].answer.splice(selectedAnswerId, 1);
            }
        } else {
            alert("Vennligst velg FAQ kategori");
        }
    };

    $scope.deleteFaqCat = function () {
        if (selectedFaqCatId != -1) {
            if (confirm("Are you sure you want to delete this partner?")) {
                $scope.customer.splice(selectedFaqCatId, 1);
            }
        } else {
            alert("Vennligst velg FAQ kategori");
        }
    };

    $scope.editQuestion = function () {
        if (selectedAnswerId != -1 && selectedFaqCatId != -1) {
            $scope.customer[selectedFaqCatId].answer[selectedAnswerId].question = $scope.faq.editQuestion;
            $scope.customer[selectedFaqCatId].answer[selectedAnswerId].answer = $(editFaq).summernote('code');
        } else if (selectedFaqCatId == -1) {
            alert("Vennligst velg FAQ kategori");
        } else {
            alert("Vennligst velg spørsmål");
        }
        $scope.faq.editQuestion = "";
        $(editFaq).summernote('code', '');
    };

    var saveCurrentSection = function () {
        $scope.section.text = $(pageSection).summernote('code');
    };

    var parseSections = function () {
        if ($scope.page.name == "Kunde") {
            return JSON.stringify($scope.customer);
        } else {
            saveCurrentSection();
            for (var prop in content) {
                if (content.hasOwnProperty(prop)) {
                    content[prop] = findSectionById(prop);
                }
            }
            return JSON.stringify(content);
        }
    };

    var findSectionById = function (id) {
        var section;
        $scope.sections.forEach(function (sec) {
            if (sec.id === id) {
                section = sec;
                delete section.id;
            }
        });
        return section;
    }

    var parseContent = function (_content) {
        var sections = [];
        content = JSON.parse(_content);
        for (var prop in content) {
            if (content.hasOwnProperty(prop)) {
                sections.push({
                    id: prop,
                    title: content[prop].title,
                    html: content[prop].html,
                    text: content[prop].text
                });
            }
        }

        return sections;
    }

    var loadPage = function () {
        $scope.loading = true;
        barefilterAPI.content.get($stateParams.handle, function (page) {
            $scope.page = page;
            if (page.name == "Kunde") {
                $scope.customer = JSON.parse(page.content);
            } else {
                $scope.sections = parseContent(page.content);
            }
            $scope.loading = false;
            $scope.$apply();
            setTimeout(initSummernote, 100);
        }, function () {
            $scope.loading = false;
            $scope.$apply();
        });
    };

    var initSummernote = function () {
        $(pageSection).summernote(getSummernoteSettings(400));
        if ($scope.sections.length > 0) {
            $scope.editSection($scope.sections[0]);
        }
        $(addFaq).summernote(getSummernoteSettings(200));
        $(editFaq).summernote(getSummernoteSettings(200));
    };

    var getSummernoteSettings = function (height) {
        return {
            height: height,
            onfocus: function (e) {
                $('body').addClass('overlay-disabled');
            },
            onblur: function (e) {
                $('body').removeClass('overlay-disabled');
            }
        }
    };

    var init = function () {
        loadPage();

    };
    init();
}]);
'use strict';
admin.controller("partnersController", ["$rootScope", "$scope", "barefilterAPI", function ($rootScope, $scope, barefilterAPI) {
    $rootScope.title = "Partners";
    $scope.searchQuery = "";
    $scope.users = [];
    $scope.loading = false;

    var modal = "#create-product-modal";

    $scope.triggerSearch = function () {
        search();
    };

    $scope.hasMembers = function () {
        return $scope.users.length > 0;
    };

    $scope.getPhone = function (user) {
        return (user.phone !== "") ? user.phone : "No phone";
    };

    $scope.delete = function (user) {
        if (confirm("Are you sure you want to delete this partner?")) {
            barefilterAPI.users.delete({
                uid: user.id
            }, function (data) {
                search();
            }, function () { });
        }
    };

    $scope.addNew = function () {
        $scope.isAddingNew = true;
        $scope.partner = getDefaultUser();
        $(modal).modal('show');
    };

    $scope.edit = function (partner) {
        $scope.isAddingNew = false;
        $scope.partner = partner;
        $(modal).modal('show');
    };

    $scope.save = function () {
        $(modal).modal('hide');
        var payload = angular.copy($scope.partner);
        //payload.properties = JSON.stringify(payload.properties);
        barefilterAPI.users.createPartner(payload, function (data) {
            search();
        }, function () { });
    };

    $scope.update = function () {
        $(modal).modal('hide');
        var payload = angular.copy($scope.partner);
        //payload.properties = JSON.stringify(payload.properties);
        barefilterAPI.users.update(payload, function (data) { }, function () { });
    };

    var getDefaultUser = function () {
        return {
            first_name: "",
            last_name: "",
            email: "",
            phone: ""
        }
    };

    var search = function () {
        $scope.loading = true;
        barefilterAPI.users.searchPartners($scope.searchQuery, function (data) {
            $scope.users = data;
            $scope.loading = false;
            $scope.$apply();
        }, function () {

        });
    };
    var init = function () {
        search();
    };
    init();
}]);
'use strict';
admin.controller("pagesController", ["$rootScope", "$scope", "barefilterAPI", function ($rootScope, $scope, barefilterAPI) {
    $rootScope.title = "Sider";
    $scope.loading = false;
    $scope.pages = [];

    $scope.hasPages = function () {
        return $scope.pages.length > 0;
    };

    var loadPages = function () {
        $scope.loading = true;
        barefilterAPI.content.all(function (pages) {
            $scope.loading = false;
            $scope.pages = pages.map(function (p) {
                p.created_at = new Date(p.created_at);
                p.updated_at = new Date(p.updated_at);
                return p;
            });
            $scope.$apply();
        }, function () {
            $scope.loading = false;
        });
    };
    var init = function () {
        loadPages();
    };
    init();
}]);
'use strict';
admin.controller("productsController", ["$rootScope", "$scope", "$timeout", "$sce", "barefilterAPI", function ($rootScope, $scope, $timeout, $sce, barefilterAPI) {
    $rootScope.title = "Produkter";
    var categories = [], modal = "#create-product-modal", selectedProductTagsInput = modal + " #product-tags", viewing = "fields";
    var productDescription = modal + " #product-description";
    var initializedDropZone = false;
    $scope.products = [];
    $scope.isAddingNew = false;
    $scope.selectedProduct = {};
    $scope.productDescription = "";
    $scope.canAddProduct = true;
    $scope.tempCategory = []; ///////////////////////////changed

    $scope.isViewing = function (test) {
        return viewing === test;
    };

    $scope.view = function (target) {
        viewing = target;
        if (target === 'images') {
            setTimeout(initDropZone, 100);
        }
    };

    $scope.hasProducts = function () {
        return $scope.products.length > 0;
    }

    $scope.productCheck = function () {
        if ($scope.isAddingNew) {
            barefilterAPI.stores.productCheck($scope.selectedProduct.name, function () {
                $scope.canAddProduct = true;
                $scope.$apply();
            }, function () {
                $scope.canAddProduct = false;
                $scope.$apply();
            })
        }

    };

    $scope.addNew = function () {
        initTemp();
        $scope.isAddingNew = true;
        $scope.selectedProduct = getDefaultProduct();
        $(productDescription).summernote('code', "");
        $(selectedProductTagsInput).tagsinput('destroy');
        $(selectedProductTagsInput).tagsinput({});
        $(modal).modal('show');
        setTimeout(initDropZone, 100);
        initCategories();
    };

    ///////////////changed
    $scope.edit = function (product) {
        $scope.isAddingNew = false;
        $scope.selectedProduct = product;
        if (!product.category) {
            alert("Kan ikke åpne dette produktet.");
            return;
        }
        var _parent_id = product.category.id;
        var _parent_ids = [];
        _parent_ids.push(_parent_id);
        var _depth = 0;
        while (_parent_id != 0 && _depth < 10) {
            _parent_id = getCategory(_parent_id).parent_id;
            _parent_ids.push(_parent_id);
            _depth++;
        }
        initTemp();
        if (_parent_ids.length > 1) {
            $scope.is_mainCategory = true;
            $scope.tempCategory.selectedCategoryId = _parent_ids[_parent_ids.length - 2].toString();
            var t = categories.filter(function (c) { return c.id == _parent_ids[_parent_ids.length - 2] });
            $scope.tempCategory.selectedTypeId = t[0].type_id.toString();
            $scope.categories = categories.filter(function (c) { return c.parent_id == 0 && c.type_id == t[0].type_id });
        }
        if (_parent_ids.length > 2) {
            $scope.is_subCategory = true;
            $scope.tempCategory.selectedSubCategoryId = _parent_ids[_parent_ids.length - 3].toString();
            $scope.subcategories = categories.filter(function (c) { return c.parent_id == _parent_ids[_parent_ids.length - 2] });
            $scope.subcategories.unshift({ id: "-1", name: "None" });
        }
        if (_parent_ids.length > 3) {
            $scope.is_subsubCategory = true;
            $scope.tempCategory.selectedSubSubCategoryId = _parent_ids[_parent_ids.length - 4].toString();
            $scope.subsubcategories = categories.filter(function (c) { return c.parent_id == _parent_ids[_parent_ids.length - 3] });
            $scope.subsubcategories.unshift({ id: "-1", name: "None" });
        }

        $scope.productDescription = $sce.trustAsHtml(product.description);
        $(selectedProductTagsInput).val(product.tags);
        $(selectedProductTagsInput).tagsinput('destroy');
        $(selectedProductTagsInput).tagsinput({});
        $(productDescription).summernote('code', product.description);
        $(modal).modal('show');
        setTimeout(initDropZone, 100);
    };

    ////////////////////////

    $scope.save = function () {
        if ($scope.selectedProduct.sku == "" || $scope.selectedProduct.name == "" || $scope.selectedProduct.price == "") {
            alert("Please fill the gaps.");
            return;
        }

        if ($scope.tempCategory.selectedCategoryId != -1) {
            $scope.selectedProduct.category_id = $scope.tempCategory.selectedCategoryId;
        }
        if ($scope.tempCategory.selectedSubCategoryId != -1) {
            $scope.selectedProduct.category_id = $scope.tempCategory.selectedSubCategoryId;
        }
        if ($scope.tempCategory.selectedSubSubCategoryId != -1) {
            $scope.selectedProduct.category_id = $scope.tempCategory.selectedSubSubCategoryId;
        }
        $scope.selectedProduct.tags = $(selectedProductTagsInput).val();
        $scope.selectedProduct.description = $(productDescription).summernote('code');
        var send_data = $scope.selectedProduct;

        barefilterAPI.stores.createProduct(send_data, function (data) {
            alert("Produktet har blitt opprettet.");
            $scope.selectedProduct.id = data.id;
            $scope.selectedProduct.images = [];
            $scope.searchQuery = $scope.selectedProduct.name;
            $scope.search();
            $scope.isAddingNew = false;
            initTemp();
        }, function () { });
    };

    $scope.update = function () {
        if ($scope.tempCategory.selectedCategoryId != -1) {
            $scope.selectedProduct.category_id = $scope.tempCategory.selectedCategoryId;
        }
        if ($scope.tempCategory.selectedSubCategoryId != -1) {
            $scope.selectedProduct.category_id = $scope.tempCategory.selectedSubCategoryId;
        }
        if ($scope.tempCategory.selectedSubSubCategoryId != -1) {
            $scope.selectedProduct.category_id = $scope.tempCategory.selectedSubSubCategoryId;
        }
        $scope.selectedProduct.tags = $(selectedProductTagsInput).val();
        $scope.selectedProduct.description = $(productDescription).summernote('code');
        var payload = JSON.parse(angular.toJson($scope.selectedProduct));
        delete payload.category;
        delete payload.images;

        barefilterAPI.stores.updateProduct(payload, function (data) {
            alert("Kategori er oppdatert!");
            loadProducts();
            $(modal).modal('hide');
            $scope.searchQuery = $scope.selectedProduct.name;
            $scope.search();
            initTemp();
        }, function () { });
    };

    $scope.getProductCategory = function (product) {
        if (product.category) {
            var _parent_id = product.category.id;
            var _parents = [];
            var _depth = 0;
            while (_parent_id != 0 && _depth < 10) {
                var _parent = getCategory(_parent_id);
                _parents.push(_parent);
                _parent_id = _parent.parent_id
                _depth++;
            }
            return _parents[_parents.length - 1].name;
        }
    };

    $scope.getProductSubCategory = function (product) {
        if (product.category) {
            var _parent_id = product.category.id;
            var _parents = [];
            var _depth = 0;
            while (_parent_id != 0 && _depth < 10) {
                var _parent = getCategory(_parent_id);
                _parents.push(_parent);
                _parent_id = _parent.parent_id
                _depth++;
            }
            if (_depth >= 2) {
                return _parents[_parents.length - 2].name;
            }
        }
    };

    $scope.getProductSubSubCategory = function (product) {
        if (product.category) {
            var _parent_id = product.category.id;
            var _parents = [];
            var _depth = 0;
            while (_parent_id != 0 && _depth < 10) {
                var _parent = getCategory(_parent_id);
                _parents.push(_parent);
                _parent_id = _parent.parent_id
                _depth++;
            }
            if (_depth == 3) {
                return _parents[0].name;
            }
        }
    };

    $scope.search = function () {
        barefilterAPI.stores.search($scope.searchQuery, function (data) {
            $scope.products = data.products;
            $scope.$apply();
        }, function () {

        });
    };

    $scope.deleteProductImage = function (image) {
        barefilterAPI.stores.deleteProductImage(image.id, function () {
            var idx = $scope.selectedProduct.images.indexOf(image);
            $scope.selectedProduct.images.splice(idx, 1);
            $scope.$apply();
        },
            function () { });
    };

    $scope.onTypeChange = function () {

        var selectedTypeId = parseInt($scope.tempCategory.selectedTypeId);
        $scope.categories = categories.filter(function (c) { return c.parent_id == 0 && c.type_id == selectedTypeId });
        $scope.is_mainCategory = $scope.categories.length > 0 ? true : false;
        $scope.tempCategory.selectedCategoryId = $scope.categories[0].id.toString();
        $scope.is_subCategory = false;
        $scope.is_subsubCategory = false;
        $scope.tempCategory.selectedSubCategoryId = -1;
        $scope.tempCategory.selectedSubSubCategoryId = -1;
    };

    $scope.onCategoryChange = function () {
        var selectedCategoryId = parseInt($scope.tempCategory.selectedCategoryId);
        var subcategories = categories.filter(function (c) { return c.parent_id == selectedCategoryId });
        $scope.tempCategory.selectedSubCategoryId = "-1";
        $scope.is_subCategory = subcategories.length > 0 ? true : false;
        subcategories.unshift({ id: "-1", name: "None" });
        $scope.subcategories = subcategories;
        $scope.is_subsubCategory = false;
        $scope.tempCategory.selectedSubSubCategoryId = "-1";
    };

    $scope.onSubCategoryChange = function () {

        var selectedSubCategoryId = parseInt($scope.tempCategory.selectedSubCategoryId);
        var subsubcategories = categories.filter(function (c) { return c.parent_id == selectedSubCategoryId });
        $scope.tempCategory.selectedSubSubCategoryId = "-1";
        $scope.is_subsubCategory = subsubcategories.length > 0 ? true : false;
        subsubcategories.unshift({ id: "-1", name: "None" });
        $scope.subsubcategories = subsubcategories;
    };

    $scope.stockCheck = function () {
        var product_stock = {
            isStock: "",
            product_id: ""
        };
        product_stock.isStock = $scope.products.isStock;
        product_stock.product_id = $scope.selectedProduct.id;
        barefilterAPI.stores.stockCheck(product_stock, function (response) {
            $scope.$apply();
        }, function () { });
    };
    $scope.Instock = function () {
        $scope.products.isStock = 1;
        $scope.stockCheck();
    };
    $scope.Outstock = function () {
        $scope.products.isStock = 0;
        $scope.stockCheck();
    };

    var initTemp = function () {
        $scope.tempCategory.selectedSubSubCategoryId = -1;
        $scope.tempCategory.selectedSubCategoryId = -1;
        $scope.tempCategory.selectedCategoryId = -1;
        $scope.tempCategory.selectedTypeId = -1;
        $scope.is_subCategory = false;
        $scope.is_subsubCategory = false;
        $scope.is_mainCategory = false;
    };

    var getSummernoteSettings = function (height) {
        return {
            height: height,
            onfocus: function (e) {
                $('body').addClass('overlay-disabled');
            },
            onblur: function (e) {
                $('body').removeClass('overlay-disabled');
            }
        }
    };
    var getDefaultProduct = function () {
        return {
            active: 1,
            sku: "",
            name: "",
            price: 0,
            description: "",
            width: 0,
            height: 0,
            length: 0,
            is_Stock: 1,
            meta_title: "",
            meta_description: "",
            meta_keywords: ""
        }
    };

    var getCategory = function (id) {
        var category = { name: "" };
        for (var i = 0; i < categories.length; i++) {
            if (categories[i].id === id) {
                category = categories[i];
                break;
            }
        }
        return category;
    };

    var onImageUploadSuccess = function (file, response) {
        if (response.success) {
            if ($scope.selectedProduct.images) {
                $scope.selectedProduct.images.push(response.data);
            }
            $scope.searchQuery = $scope.selectedProduct.name;
            $scope.search();
            $scope.$apply();
            this.removeFile(file);
        }
    };

    var onSendingImage = function (file, xhr, formData) {
        formData.append("id", $scope.selectedProduct.id);
    };

    var initDropZone = function () {
        if (!initializedDropZone) {
            var dropzone = new Dropzone("#image-uploader", {
                addRemoveLinks: true,
                url: barefilterAPI.stores.getProductImageUploadURL(),
                acceptedFiles: 'image/png, image/jpeg'
            });
            dropzone.on("sending", onSendingImage);
            dropzone.on("success", onImageUploadSuccess);
            initializedDropZone = true;
        }
    };

    var initSummernote = function () {
        $(productDescription).summernote('destroy');
        $(productDescription).summernote(getSummernoteSettings(200));
    };

    var loadProducts = function () {
        barefilterAPI.stores.getProducts(function (paginator) {
            $scope.products = paginator.data;
            $scope.$apply();
        }, function () { });
    };
    ///////////////////
    var initCategories = function () {
        if (!$scope.isAddingNew) {
            // var selectedTypeId = 1, selectedCategoryId, selectedSubCategoryId;
            // $scope.categories = categories.filter(function (c) { return c.parent_id === 0 && c.type_id === selectedTypeId });
            // selectedCategoryId = $scope.categories[0].id;

            // $scope.tempCategory.selectedCategoryId = selectedCategoryId.toString();
            // $scope.tempCategory.selectedSubCategoryId = "0";
            // $scope.tempCategory.selectedTypeId = selectedTypeId.toString();

            // var subcategories = categories.filter(function (c) { return c.parent_id === selectedCategoryId });
            // if (subcategories.length > 0) {
            //     $scope.subcategories = categories.filter(function (c) { return c.parent_id === selectedCategoryId });
            //     $scope.tempCategory.selectedSubCategoryId = subcategories[0].id.toString();
            //     subcategories.unshift({ id: "0", name: "None" });
            // }
            // $scope.subcategories = subcategories;
        }
    }
    //////////////////////
    var loadCategories = function () {
        barefilterAPI.stores.getCategories(function (data) {
            categories = data;
            initCategories();
            $scope.$apply();
        }, function () { });
    };
    $scope.delete = function (product) {
        if (confirm("Are you sure you want to delete this category?")) {
            barefilterAPI.stores.deleteProduct({
                pid: product.id
            }, function (data) {
                console.log(data);
                loadProducts();
            }, function () { });
        }
    };
    var init = function () {
        loadCategories();
        loadProducts();

    };
    init();
}]);
'use strict';
admin.controller("profileController", ["$rootScope", "$scope", "$stateParams", "barefilterAPI", function ($rootScope, $scope, $stateParams, barefilterAPI) {
    $rootScope.title = "Profile";

    var init = function () {

    };
    init();
}]);
'use strict';
admin.controller("salesController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    $rootScope.title = "Orders";
    var startDate, endDate;
    $scope.orders = [];
    $scope.loading = false;
    $scope.selectedSubscription = "0";
    $scope.searching = false;


    $scope.hasOrders = function () {
        return $scope.orders.length > 0;
    };

    $scope.getPurchaseDate = function (date) {
        return new Date(date);
    };

    $scope.getStartDate = function () {
        return startDate.toDate();
    };

    $scope.getEndDate = function () {
        return endDate.toDate();
    };

    $scope.delete = function (order) {
        if (confirm("Are you sure you want to delete this order?")) {
            barefilterAPI.orders.delete({
                oid: order.id
            }, function (data) {
                loadTimeframedHistory();
            }, function () { });
        }
    };

    $scope.reload = function () {
        loadTimeframedHistory();
    };

    $scope.$watch('searchQuery', function (val) {
        search();
    });

    $scope.exportToExcel = function () {
        var dateFormat = "YYYY-MM-DD";
        barefilterAPI.orders.exportToExcel(
            usersService.getLoggedUserId(),
            $scope.selectedSubscription,
            startDate.format(dateFormat),
            endDate.format(dateFormat));
    };

    var search = function () {
        if (!$scope.loading && $scope.searching) {
            $scope.loading = true;
            barefilterAPI.orders.search($scope.searchQuery, function (data) {
                $scope.loading = false;
                $scope.orders = data;
                $scope.$apply();
            }, function () {

            });
        } else {
            setTimeout(search, 100);
        }

    };


    var loadTimeframedHistory = function () {
        $scope.loading = true;
        var dateFormat = "YYYY-MM-DD";
        barefilterAPI.orders.getTimeframedHistory(
            usersService.getLoggedUserId(),
            $scope.selectedSubscription,
            startDate.format(dateFormat),
            endDate.format(dateFormat),
            function (data) {
                $scope.loading = false;
                $scope.orders = data.filter(function (order) {
                    return order.products.length > 0;
                });
                $scope.$apply();
            },
            function () {
                $scope.loading = false;
            });
    };

    var loadSubscriptionTypes = function () {
        barefilterAPI.orders.getSubscriptionTypes(function (data) {
            data.unshift({
                id: "0",
                name: "All"
            });
            $scope.subscriptions = data;
            $scope.$apply();
        }, function () { });
    };

    var onDaterangeChange = function (start, end, label) {
        startDate = start;
        endDate = end;
        loadTimeframedHistory();
    };

    var initDaterangePicker = function () {
        $('#sales-daterange-picker').daterangepicker({
            startDate: startDate,
            endDate: endDate,
            maxDate: endDate
        }, onDaterangeChange);
    };

    var init = function () {
        startDate = moment().startOf("month");
        endDate = moment();
        initDaterangePicker();
        loadSubscriptionTypes();
        loadTimeframedHistory();
    };
    init();
}]);
'use strict';
admin.controller("settingsController", ["$rootScope", "$scope", 'barefilterAPI', function ($rootScope, $scope, barefilterAPI) {
    $rootScope.title = "Settings";

    $scope.settings = {};
    $scope.saving = false;

    $scope.save = function () {
        $scope.saving = true;
        var obj = angular.copy($scope.settings);
        obj.configuration = JSON.stringify(obj.configuration);
        barefilterAPI.settings.update(obj, function (data) {
            $scope.settings = data;
            $scope.saving = false;
            $scope.$apply();
        }, function () {
            $scope.saving = false;
            $scope.$apply();
        });
    };
    var init = function () {
        barefilterAPI.settings.get(function (data) {
            $scope.settings = data;
            $scope.$apply();
        }, function () { });
    };
    init();
}]);
'use strict';
admin.controller("subscriptionsBrowserController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    $rootScope.title = "Abonnementer";
    var startDate, endDate;
    $scope.products = [];
    $scope.loading = false;

    $scope.hasUpcomingOrders = function () {
        return $scope.products.length > 0;
    };

    $scope.getPurchaseDate = function (date) {
        return new Date(date);
    };

    $scope.getStartDate = function () {
        return startDate.toDate();
    };

    $scope.getEndDate = function () {
        return endDate.toDate();
    };

    $scope.deleteSubscription = function (product) {
        if (confirm("Are you sure you want to delete this subscription order?")) {
            barefilterAPI.orders.deleteSubscription({ id: product.id }, function (data) {
                loadTimeframedHistory();
            }, function () { });
        }
    };

    var loadTimeframedHistory = function () {
        $scope.loading = true;
        var dateFormat = "YYYY-MM-DD";
        barefilterAPI.orders.browseSubscriptions(
            startDate.format(dateFormat),
            endDate.format(dateFormat),
            function (data) {
                $scope.loading = false;
                $scope.products = data;
                $scope.$apply();
            },
            function () { });
    };



    var onDaterangeChange = function (start, end, label) {
        startDate = start;
        endDate = end;
        loadTimeframedHistory();
    };

    var initDaterangePicker = function () {
        $('#sales-daterange-picker').daterangepicker({
            startDate: startDate,
            endDate: endDate,
            minDate: startDate
        }, onDaterangeChange);
    };

    var init = function () {
        startDate = moment();
        endDate = moment().endOf('month');
        initDaterangePicker();
        loadTimeframedHistory();
    };
    init();
}]);
'use strict';
admin.controller("storesController", ["$rootScope", "$scope", function ($rootScope, $scope) {
    $rootScope.title = "Stores";

    var init = function () {

    };
    init();
}]);
'use strict';
members.controller("buildingController", ["$rootScope", "$scope", "$stateParams", "usersService", "barefilterAPI", function ($rootScope, $scope, $stateParams, usersService, barefilterAPI) {
    $rootScope.title = "Building Profile";

    var loadBuildingProfile = function () {
        barefilterAPI.buildings.profile($stateParams.id, function (building) {
            $scope.building = building;
            $scope.$apply();
        }, function (err) { });
    };

    var init = function () {
        loadBuildingProfile();
    };
    init();
}]);
'use strict';
members.controller("buildingsController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    $rootScope.title = "Mine bygg";


    var getDefaultBuilding = function () {
        var user = usersService.getLoggedUser();
        return {
            uid: user.id,
            name: "",
            first_name: user.first_name,
            last_name: user.last_name,
            phone: user.phone,
            email: user.email,
            street_address: "",
            postal_code: "",
            city: ""
        };
    };

    var loadMyBuildings = function () {
        barefilterAPI.buildings.mine(usersService.getLoggedUserId(), function (buildings) {
            $scope.buildings = buildings;
            $scope.$apply();
        }, function (err) { });
    };

    var init = function () {
        loadMyBuildings();
    };
    init();



    $scope.loading = false;
    $scope.buildings = [];
    $scope.newBuilding = getDefaultBuilding();

    $scope.hasBuildings = function () {
        return $scope.buildings.length > 0;
    };

    $scope.getNamesOfFacilities = function (building) {
        return (building.facilities !== undefined && building.facilities.length > 0) ? building.facilities.map(function (f) {
            return f.name;
        }).join(", ") : "No facilities";
    };

    $scope.saveBuilding = function () {
        $scope.loading = true;
        barefilterAPI.buildings.add($scope.newBuilding, function (building) {
            $scope.loading = false;
            $scope.newBuilding = getDefaultBuilding();
            loadMyBuildings();
        }, function () { });
    };
}]);
'use strict';
members.controller("oneTimeTransactionsController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    $rootScope.title = "Mine engangskjøp";

    var paginator = {};
    $scope.products = [];
    $scope.loading = false;
    $scope.selectedProduct = {};
    $scope.selectedSubscription = null;
    $scope.newPrice = 0;

    $scope.setupTransfer = function (p) {
        $scope.selectedProduct = p;
        $("#transfer-to-subscription-modal").modal('show');
    };

    $scope.updatePreview = function () {
        $scope.newPrice = ($scope.selectedSubscription !== null) ? $scope.selectedProduct.price - Math.round($scope.selectedProduct.price * $scope.selectedSubscription.discount / 100) : 0;
        $scope.newPrice = $scope.newPrice * $scope.selectedProduct.amount;
    };

    $scope.transfer = function () {
        var data = {
            opid: $scope.selectedProduct.opid,
            sid: $scope.selectedSubscription.id,
            amount: $scope.selectedProduct.amount
        };
        barefilterAPI.orders.transferSubscription(data, function (op) {
            loadMyTransactions();
        }, function () { });
        $scope.close();
    };

    $scope.close = function () {
        $scope.selectedSubscription = null;
        $scope.newPrice = 0;
        $("#transfer-to-subscription-modal").modal('hide');
    };

    $scope.hasTransactions = function () {
        return $scope.products.length > 0;
    };

    var parseResults = function (orders) {
        var products = [];
        orders.forEach(function (order) {
            let _order = order;
            order.products.forEach(p => {
                if (p.product) {
                    var product = p.product;
                    product.order_identifier = _order.identifier;
                    product.amount = p.amount;
                    product.shipping = _order.shipping;
                    product.purchase_date = new Date(_order.created_at);
                    product.opid = p.id;
                    products.push(product);
                }
            });
        });
        return products;
    };

    var loadMyTransactions = function () {
        $scope.loading = true;
        barefilterAPI.orders.getOneTimeTransactionsByUserId(usersService.getLoggedUserId(), function (_paginator) {
            paginator = _paginator;
            $scope.loading = false;
            $scope.products = parseResults(paginator.data);
            $scope.$apply();
        }, function () { });
    };

    var loadSubscriptionTypes = function () {
        barefilterAPI.orders.getSubscriptionTypes(function (types) {
            $scope.subscriptionTypes = types.filter(function (t) {
                return t.discount > 0;
            });
        }, function () { });
    };
    var init = function () {
        loadMyTransactions();
        loadSubscriptionTypes();
    };
    init();
}]);
'use strict';
admin.controller("ordersController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    $rootScope.title = "Orders";

    var paginator = {};
    $scope.orders = [];
    $scope.loading = false;


    $scope.hasOrders = function () {
        return $scope.orders.length > 0;
    };

    $scope.getPurchaseDate = function (date) {
        return new Date(date);
    };

    $scope.delete = function (order) {
        if (confirm("Are you sure you want to delete this order?")) {
            barefilterAPI.orders.delete({
                oid: order.id
            }, function (data) {
                loadMyTransactions();
            }, function () { });
        }
    };


    var loadMyTransactions = function () {
        $scope.loading = true;
        barefilterAPI.orders.getHistory(usersService.getLoggedUserId(), function (_paginator) {
            paginator = _paginator;
            $scope.loading = false;
            $scope.orders = paginator.data;
            $scope.$apply();
        }, function () { });
    };
    var init = function () {
        loadMyTransactions();
    };
    init();
}]);
'use strict';
members.controller("packageTrackingController", ["$rootScope", "$scope", function ($rootScope, $scope) {
    $rootScope.title = "Pakkesporing";

    var init = function () {

    };
    init();
}]);
'use strict';
members.directive('buildingsManager', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/partner/buildings.html',
        scope: {},
        controller: function ($scope) {

            var getDefaultFacilities = function () {
                return [{
                    id: 0,
                    name: "Opprett avdelig"
                }];
            };
            var getDefaultBuilding = function () {
                var user = usersService.getLoggedUser();
                return {
                    uid: user.id,
                    name: "",
                    first_name: user.first_name,
                    last_name: user.last_name,
                    phone: user.phone,
                    email: user.email,
                    street_address: "",
                    postal_code: "",
                    city: ""
                };
            };
            var getDefaultFacility = function () {
                return {
                    name: "",
                    building_id: $scope.selectedBuildingId
                };
            }
            var loadBuildings = function () {
                barefilterAPI.buildings.mine(usersService.getLoggedUserId(), function (buildings) {
                    if (buildings.length > 0) {
                        $scope.buildings = $scope.buildings.concat(buildings);
                        $scope.selectedBuildingId = buildings[0].id.toString();
                        $scope.selectedBuilding = buildings[0];
                        if ($scope.selectedBuilding.facilities.length > 0) {
                            $scope.facilities = $scope.facilities.concat($scope.selectedBuilding.facilities);
                            $scope.selectedFacilityId = $scope.selectedBuilding.facilities[0].id.toString();
                            notifyFacilitySelection($scope.selectedBuilding.facilities[0]);
                        }
                    }
                    $scope.$apply();
                }, function (err) { });
            };
            var init = function () {
                loadBuildings();
            };
            var notifyFacilitySelection = function (facility) {
                $scope.$emit("facilitySelection", {
                    building: $scope.selectedBuilding,
                    facility: facility
                });
            };


            $scope.loading = false;
            $scope.buildings = [{
                id: 0,
                name: "Opprett bygg"
            }];
            $scope.facilities = getDefaultFacilities();
            $scope.selectedBuildingId = -1;
            $scope.selectedFacilityId = -1;
            $scope.newBuilding = getDefaultBuilding();
            $scope.selectedBuilding = null;

            $scope.hasBuildings = function () {
                return $scope.buildings.length > 1;
            };
            $scope.hasFacilities = function () {
                return ($scope.selectedBuilding !== null) ? $scope.selectedBuilding.facilities.length > 0 : true;
            };
            $scope.hasSelectedBuilding = function () {
                return $scope.selectedBuilding !== null;
            };
            $scope.startBuildingCreation = function () {
                $scope.selectedBuildingId = "0";
                $scope.newBuilding = getDefaultBuilding();
            };
            $scope.startFacilityCreation = function () {
                $scope.selectedFacilityId = "0";
                $scope.newFacility = getDefaultFacility();
            };
            $scope.isCreatingBuilding = function () {
                return $scope.selectedBuildingId === "0";
            };
            $scope.isCreatingFacility = function () {
                return $scope.selectedFacilityId === "0";
            };
            $scope.onBuildingSelection = function () {
                if ($scope.selectedBuildingId === "0") {
                    $scope.selectedBuilding = null;
                    $scope.newBuilding = getDefaultBuilding();
                    notifyFacilitySelection(null);
                } else {
                    for (var i = 0; i < $scope.buildings.length; i++) {
                        if ($scope.buildings[i].id.toString() === $scope.selectedBuildingId) {
                            $scope.selectedBuilding = $scope.buildings[i];
                            $scope.facilities = getDefaultFacilities().concat($scope.selectedBuilding.facilities);
                            if ($scope.selectedBuilding.facilities.length > 0) {
                                $scope.selectedFacilityId = $scope.selectedBuilding.facilities[0].id.toString();
                                notifyFacilitySelection($scope.selectedBuilding.facilities[0]);
                            } else {
                                notifyFacilitySelection(null);
                            }
                            break;
                        }
                    }
                }
            };
            $scope.onFacilitySelection = function () {
                if ($scope.selectedFacilityId === "0") {
                    $scope.newFacility = getDefaultFacility();
                    notifyFacilitySelection(null);
                } else {
                    for (var i = 0; i < $scope.facilities.length; i++) {
                        if ($scope.facilities[i].id.toString() === $scope.selectedFacilityId) {
                            notifyFacilitySelection($scope.facilities[i]);
                            break;
                        }
                    }
                }
            };

            $scope.cancelFacilityCreation = function () {
                if ($scope.selectedBuilding.facilities.length > 0) {
                    $scope.selectedFacilityId = $scope.selectedBuilding.facilities[0].id.toString();
                    notifyFacilitySelection($scope.selectedBuilding.facilities[0]);
                } else {
                    notifyFacilitySelection(null);
                }
            };
            $scope.saveBuilding = function () {
                $scope.loading = true;
                barefilterAPI.buildings.add($scope.newBuilding, function (building) {
                    $scope.loading = false;
                    building.facilities = [];
                    $scope.selectedBuildingId = building.id.toString();
                    $scope.selectedBuilding = building;
                    $scope.buildings.push(building);
                    $scope.newFacility = getDefaultFacility();
                    $scope.$apply();
                }, function () { });
            };
            $scope.saveFacility = function () {
                $scope.loading = true;
                barefilterAPI.buildings.addFacility($scope.newFacility, function (facility) {
                    $scope.loading = false;
                    $scope.selectedBuilding.facilities.push(facility);
                    $scope.selectedFacilityId = facility.id.toString();
                    $scope.newFacility = getDefaultFacility();
                    $scope.facilities = getDefaultFacilities().concat($scope.selectedBuilding.facilities);
                    notifyFacilitySelection(facility);
                    $scope.$apply();
                }, function () { });
            };
            init();
        }
    };
}]);
'use strict';
members.directive('partnerCheckout', ["$state", "usersService", "barefilterAPI", function ($state, usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/partner/checkout.html',
        scope: {},
        controller: function ($scope) {
            var selectedBuilding, selectedFacility, products;
            var paymentMethod, shippingMethod;
            var succeededPlacingOrder = false;
            $scope.totals = null;
            $scope.$on("totalsUpdate", function (e, data) {
                var totals = data.totals;
                products = data.cart;
                if (paymentMethod !== undefined && shippingMethod !== undefined) {
                    totals.subtotal += paymentMethod.price;
                    totals.subtotal += shippingMethod.price;
                    totals.shipping = shippingMethod.price;
                }
                totals.tax = Math.round(totals.subtotal * 0.25); // dett inkluderer 25%
                //totals.total = totals.subtotal + totals.tax;
                totals.total = totals.subtotal;
                $scope.totals = totals;
            });

            $scope.$on("shippingUpdate", function (e, data) {
                selectedBuilding = data.building;
                selectedFacility = data.facility;
            });

            $scope.hasAnything = function () {
                return $scope.totals !== null && $scope.totals.total > 0;
            };

            $scope.hasFailedPlacingOrder = function () {
                return ($scope.placingOrder) ? false : !succeededPlacingOrder;
            };

            $scope.hasSuccededPlacingOrder = function () {
                return ($scope.placingOrder) ? false : succeededPlacingOrder;
            };

            $scope.placeOrder = function () {
                var payload = getPayload();
                $scope.placingOrder = true;
                $scope.hasPlacedOrder = true;
                barefilterAPI.orders.place(payload, onOrderPlaced, function () {
                    $scope.placingOrder = false;
                    succeededPlacingOrder = false;
                    $scope.$apply();
                })
            };


            var onOrderPlaced = function (data) {
                $scope.placingOrder = false;
                succeededPlacingOrder = true;

                $scope.$apply();
                setTimeout(function () {
                    $state.go('building', {
                        id: selectedBuilding.id
                    });
                }, 1500);
            };
            var getPayload = function () {
                return {
                    netaxept: false,
                    uid: usersService.getLoggedUserId(),
                    bid: selectedBuilding.id,
                    fid: selectedFacility.id,
                    tas: shippingMethod.handle,
                    shipping_method_id: shippingMethod.id,
                    payment_method_id: paymentMethod.id,
                    promo_code: '',
                    products: products.map(function (p) {
                        return {
                            id: p.id,
                            subscription_id: p.subscription_id,
                            total: p.total
                        }
                    }),
                    addresses: {
                        same: true,
                        shipping: selectedBuilding.address,
                        billing: null
                    },
                    summary: $scope.totals
                };
            };

            var init = function () {
                barefilterAPI.stores.cart('1', function (data) {
                    data.payment_methods.forEach(function (method) {
                        if (method.handle === "faktura") {
                            paymentMethod = method;
                        }
                    });
                    data.shipping_methods.forEach(function (method) {
                        if (method.handle === "bring_bedr_dor_dor") {
                            shippingMethod = method;
                        }
                    });
                }, function () { });
            };
            init();
        }
    };
}]);
'use strict';
members.controller("partnerController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    var selectedBuilding = null, selectedFacility = null;
    $rootScope.title = "Partner";

    $scope.hasSelectedFacility = function () {
        return selectedFacility !== null;
    };

    $scope.$on("facilitySelection", function (e, data) {
        selectedFacility = data.facility;
        $scope.$broadcast("shippingUpdate", data);
    });

    $scope.$on("cartUpdate", function (e, data) {
        $scope.$broadcast("totalsUpdate", data);
    });
}]);
'use strict';
members.directive('partnerStore', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/partner/store.html',
        scope: {},
        controller: function ($scope) {
            var discount = usersService.getLoggedUserDiscount() / 100;
            var viewing = 0;
            var getTotals = function () {
                return {
                    goods: 0,
                    shipping: 0,
                    discount: 0,
                    subtotal: 0,
                    total: 0,
                    tax: 0,
                    rate: usersService.getLoggedUserDiscount()
                };
            };

            $scope.searchQuery = "";
            $scope.cart = [];
            $scope.results = [];
            $scope.totals = getTotals();

            $scope.search = function () {
                barefilterAPI.stores.search($scope.searchQuery, function (data) {
                    $scope.results = data.products;
                    $scope.$apply();
                }, function () {

                });
            };
            $scope.hasResults = function () {
                return $scope.results.length > 0;
            };
            $scope.addToCart = function (product) {
                product.subscription_id = 1;
                product.total = 1;
                product.cost = product.price * product.total;
                product.cost = product.cost - (product.cost * discount);
                $scope.results = [];
                $scope.searchQuery = "";
                $scope.cart.push(product);
                $scope.updateCart();
            };
            $scope.removeFromCart = function (product) {
                $scope.cart.splice($scope.cart.indexOf(product), 1);
                $scope.updateCart();
            };
            $scope.updateCart = function () {
                var totals = getTotals();
                $scope.cart.forEach(function (p) {
                    totals.goods += p.price * p.total;
                });

                totals.discount = Math.round(totals.goods * discount);
                totals.subtotal = totals.goods - totals.discount;
                $scope.totals = totals;
                $scope.$emit("cartUpdate", {
                    cart: $scope.cart,
                    totals: $scope.totals
                });
            };
            $scope.hasProductsInCart = function () {
                return $scope.cart.length > 0;
            };
        }
    };
}]);
'use strict';
members.directive('memberAddresses', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/settings/addresses.html',
        scope: {},
        controller: function ($scope) {
            $scope.loading = false;
            $scope.addresses = [];
            $scope.hasAddresses = function () {
                return $scope.addresses.length > 0;
            };
            $scope.addAddress = function () {
                $scope.loading = true;
                barefilterAPI.users.addAddress($scope.newAddress, function (address) {
                    $scope.$emit("addresses-change");
                    $scope.addresses.push(address);
                    $scope.loading = false;
                    initAddress();
                    $scope.$apply();
                }, function () { });
            };

            $scope.deleteAddress = function (address) {
                var user = usersService.getLoggedUser();
                if (user.shipping_id !== address.id && user.billing_id !== address.id) {
                    $scope.loading = true;
                    barefilterAPI.users.deleteAddress(address, function (address) {
                        $scope.$emit("addresses-change");
                        $scope.addresses.splice($scope.addresses.indexOf(address), 1);
                        $scope.loading = false;
                        initAddress();
                        $scope.$apply();
                    }, function () { });
                } else {
                    alert("Cannot delete address since it's used either as shipping or billing address");
                }

            };

            var initAddress = function () {
                $scope.newAddress = {
                    first_name: "",
                    last_name: "",
                    street_address: "",
                    postal_code: "",
                    city: "",
                    phone: "",
                    email: "",
                    uid: usersService.getLoggedUserId()
                };
            };

            var loadAddresses = function () {
                barefilterAPI.users.myAddresses(usersService.getLoggedUserId(), function (addresses) {
                    $scope.addresses = addresses;
                    $scope.$apply();
                }, function () { });
            };

            var init = function () {
                initAddress();
                loadAddresses();
            };
            init();
        }
    };
}]);
'use strict';
members.directive('changePassword', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/settings/change-password.html',
        scope: {},
        controller: function ($scope) {
            $scope.loading = false;
            $scope.feedback = "";
            $scope.password = {};

            $scope.save = function () {
                $scope.loading = true;
                $scope.feedback = "We are saving your new password.";
                barefilterAPI.users.changePassword($scope.password, function (data) {
                    $scope.feedback = "Your password has been successfully updated."
                    $scope.$apply();
                    scheduleReset();
                }, function (data) {
                    $scope.feedback = data;
                    $scope.$apply();
                    scheduleReset();
                });
            }

            $scope.validate = function () {
                if ($scope.password.new !== $scope.password.repeat) {
                    $scope.loading = true;
                    $scope.feedback = "Passwords do not match.";
                } else {
                    $scope.feedback = "";
                    $scope.loading = false;
                }
            };
            var scheduleReset = function () {
                setTimeout(function () {
                    reset();
                    $scope.$apply();
                }, 1500);
            };
            var initPassword = function () {
                $scope.password = {
                    uid: usersService.getLoggedUserId(),
                    old: "",
                    new: "",
                    repeat: ""
                };
            };
            var reset = function () {
                $scope.loading = false;
                initPassword();
            };
            reset();
        }
    };
}]);
'use strict';
members.directive('memberInformation', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/settings/member-information.html',
        scope: {},
        controller: function ($scope) {
            $scope.loading = false;
            $scope.user = usersService.getLoggedUser();
            $scope.shipping_id = $scope.user.shipping_id.toString();
            $scope.billing_id = $scope.user.billing_id.toString();
            $scope.addresses = [];
            $scope.save = function () {
                $scope.loading = true;
                $scope.user.shipping_id = parseInt($scope.shipping_id);
                $scope.user.billing_id = parseInt($scope.billing_id);
                $scope.user.properties = JSON.stringify(user.properties);
                barefilterAPI.users.update($scope.user, function (user) {
                    $scope.loading = false;
                    usersService.updateLoggedUser($scope.user);
                    $scope.$apply();
                }, function () { });
            }


            var loadAddresses = function () {
                barefilterAPI.users.myAddresses(usersService.getLoggedUserId(), function (addresses) {
                    $scope.addresses = addresses;
                    $scope.$apply();
                }, function () { });
            };
            loadAddresses();

            $scope.$on("reload-addresses", loadAddresses);
        }
    };
}]);
'use strict';
members.directive('partnerInformation', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/settings/partner-information.html',
        scope: {},
        controller: function ($scope) {
            $scope.loading = false;
            $scope.user = usersService.getLoggedUser();
            $scope.feedback = "";
            $scope.save = function () {
                $scope.loading = true;
                $scope.feedback = "We are saving your information.";
                //$scope.user.properties = JSON.stringify($scope.user.properties);
                barefilterAPI.users.update($scope.user, function (data) {
                    $scope.user = data;
                    $scope.feedback = "Your information has been successfully updated.";
                    scheduleReset();
                    $scope.$apply();
                }, function (err) {
                    $scope.feedback = err;
                    scheduleReset();
                    $scope.$apply();
                });
            };


            var scheduleReset = function () {
                setTimeout(function () {
                    $scope.loading = false;
                    $scope.$apply();
                }, 1500);
            };

        }
    };
}]);
'use strict';
members.directive('partnerLogo', ["usersService", "barefilterAPI", function (usersService, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/members/settings/partner-logo.html',
        scope: {
        },
        controller: function ($scope, $rootScope) {
            var modal = "#partner-logo-modal";
            $scope.partner = {};
            $scope.user = usersService.getLoggedUser();

            $scope.uploadLogo = function () {
                $(modal).modal('show');
                setTimeout(initDropZone, 100);
            };

            $scope.logoUpload = function () {
                $(modal).modal('toggle');
            };

            var onImageUploadSuccess = function (file, response) {
                if (response.success) {
                    $scope.partner.logo = response.data;
                    $rootScope.partner_logo = $scope.partner.logo;
                    $scope.$apply();
                }
            };

            var onSendingImage = function (file, xhr, formData) {
                formData.append("id", $scope.user.id);
            };

            var initDropZone = function () {
                var dropzone = new Dropzone("#image-uploader", {
                    url: barefilterAPI.stores.getPatnerLogoUploadURL(),
                    acceptedFiles: 'image/png, image/jpeg'
                });
                dropzone.on("sending", onSendingImage);
                dropzone.on("success", onImageUploadSuccess);
            };

        }
    };
}]);
'use strict';
members.controller("memberSettingsController", ["$rootScope", "$scope", function ($rootScope, $scope) {
    $rootScope.title = "Brukerinnstillinger";

    $scope.$on("addresses-change", function () {
        $scope.$broadcast("reload-addresses");
    });
    var init = function () {

    };
    init();
}]);
'use strict';
members.controller("subscriptionsController", ["$rootScope", "$scope", "usersService", "barefilterAPI", function ($rootScope, $scope, usersService, barefilterAPI) {
    $rootScope.title = "Mine filterabonnement";
    var paginator = {};
    $scope.products = [];
    $scope.loading = false;


    $scope.hasTransactions = function () {
        return $scope.products.length > 0;
    };


    $scope.cancelSubscription = function (p) {
        if (confirm("Are you sure you want to cancel this subscription?")) {
            var data = {
                opid: p.opid
            };
            barefilterAPI.orders.cancelSubscription(data, function (op) {
                loadMyTransactions();
            }, function () { });
        }

    };

    var parseResults = function (orders) {
        var products = [];
        orders.forEach(function (order) {
            let _order = order;
            order.products.forEach(function (p) {
                if (p.product) {
                    var product = p.product;                
                    product.opid = p.id;
                    product.order_identifier = _order.identifier;
                    product.subscription_id = p.subscription_id;
                    product.amount = p.amount;
                    product.shipping = _order.shipping;
                    product.purchase_date = new Date(_order.created_at);
                    product.first_delivery_date = moment(_order.created_at).add(6, 'month').toDate();
                    product.second_delivery_date = moment(_order.created_at).add(12, 'month').toDate()
                    products.push(product);
                }
            });
        });
        return products;
    };

    var loadMyTransactions = function () {
        $scope.loading = true;
        barefilterAPI.orders.getSubscriptionsByUserId(usersService.getLoggedUserId(), function (_paginator) {
            paginator = _paginator;
            $scope.loading = false;
            $scope.products = parseResults(paginator.data);
            $scope.$apply();
        }, function () { });
    };
    var init = function () {
        loadMyTransactions();
    };
    init();
}]);
'use strict';
dashboard.directive('adminDashboard', ["$state", "barefilterAPI", function ($state, barefilterAPI) {
    return {
        templateUrl: 'ng/modules/dashboard/admin-dashboard.html',
        scope: {},
        controller: function ($scope) {
            var startDate, endDate, startProDate, endProDate, histogram = [];
            $scope.aggregates = {
                orders: 0,
                sales: 0,
                discounts: 0,
                total_onetime_purchases: 0,
                filter_packages_purchases: 0,
                one_time: 0,
                disposal: 0,
                total_subscriptions: 0,
                total_onetime_subscriptions: 0,
                total_twotime_subscriptions: 0
            };
            $scope.one_time = 0;
            $scope.disposal = 0;
            $scope.loading = false;
            $scope.productLoading = false;
            $scope.top = [];
            $scope.subscriptions = [];
            $scope.date = "thismonth-tab";

            $scope.hasTopTen = function () {
                return $scope.top.length > 0;
            };

            $scope.hasSubscriptions = function () {
                return $scope.subscriptions.length > 0;
            };

            $scope.selectDaterange = function (date) {
                console.log(date);
                $scope.date = date;
                var dateFormat = "YYYY-MM-DD";
                if (date == "begin-tab") {
                    startDate = moment('1990-01-01');
                    endDate = moment();
                } else if (date == "year-tab") {
                    startDate = moment().startOf("year");
                    endDate = moment().endOf("year");
                } else if (date == "lastmonth-tab") {
                    startDate = moment(moment().endOf("month")).subtract(1, 'months').startOf('month');
                    endDate = moment(moment().endOf("month")).subtract(1, 'months').endOf('month');
                } else if (date == "thismonth-tab") {
                    startDate = moment().startOf("month");
                    endDate = moment().endOf("month");
                } else {
                    return;
                }
                $scope.loading = true;
                barefilterAPI.orders.getDashboard(
                    startDate.format(dateFormat),
                    endDate.format(dateFormat),
                    function (data) {
                        $scope.loading = false;
                        $scope.aggregates = data.aggregates;
                        $scope.one_time = data.aggregates.filter_packages_purchases;
                        $scope.disposal = data.aggregates.total_onetime_purchases;
                        histogram = data.sales_histogram;
                        $scope.top = data.top_ten;
                        (histogram.length > 0) ? drawColumnChart(date) : {};
                        $scope.$apply();
                    },
                    function () { });
            };

            var loadDashboard = function (dateview = "thismonth-tab") {
                $scope.loading = true;
                var dateFormat = "YYYY-MM-DD";
                barefilterAPI.orders.getDashboard(
                    startDate.format(dateFormat),
                    endDate.format(dateFormat),
                    function (data) {
                        $scope.loading = false;
                        $scope.aggregates = data.aggregates;
                        $scope.one_time = data.aggregates.filter_packages_purchases;
                        $scope.disposal = data.aggregates.total_onetime_purchases;;
                        histogram = data.sales_histogram;
                        $scope.top = data.top_ten;
                        // $scope.subscriptions = data.subscriptions_thismonth;
                        (histogram.length > 0) ? drawColumnChart(dateview) : {};
                        $scope.$apply();
                    },
                    function () { });
            };

            var loadProductsList = function () {
                $scope.productLoading = true;
                var dateFormat = "YYYY-MM-DD";
                barefilterAPI.orders.getProductsList(
                    startProDate.format(dateFormat),
                    endProDate.format(dateFormat),
                    function (data) {
                        var temp = [];
                        data.forEach(function (order) {
                            if (order.order_product !== null) {
                                if (typeof temp[order.order_product.product_id] === 'undefined') {
                                    temp[order.order_product.product_id] = order;
                                    temp[order.order_product.product_id].total = 0;
                                }
                                temp[order.order_product.product_id].total += parseInt(order.order_product.amount, 10);
                            }
                        })
                        temp.forEach(function (order) {
                            if (order.order_product.product !== null) {
                                $scope.subscriptions.push(order);
                            }
                        });

                        $scope.productLoading = false;
                        $scope.$apply();
                    },
                    function () { });
            };

            var drawColumnChart = function (dateType = null) {
                var arr = [
                    ['Date', 'Sales', 'Discounts']
                ];
                var dateFormat = "YYYY-MM-DD";
                var now = new Date();
                if (dateType == 'begin-tab') {
                    histogram.forEach(function (bin) {
                        arr.push([bin.date.toString(), bin.sales, bin.discounts]);
                    });
                } else if (dateType == 'year-tab') {
                    histogram.forEach(function (bin) {
                        arr.push([bin.date, bin.sales, bin.discounts]);
                    });
                    for (var i = arr.length - 1; i < 12; i++) {
                        var current = new Date(now.getFullYear(), i, 1);
                        arr.push([moment(current).format('MMM'), 0, 0]);
                    }
                } else if (dateType == 'lastmonth-tab') {
                    var _startDate = parseInt(moment(moment().endOf("month")).subtract(1, 'months').startOf('month').format('D'));
                    var _endDate = parseInt(moment(moment().endOf("month")).subtract(1, 'months').endOf('month').format('D'));
                    for (var i = _startDate; i <= _endDate; i++) {
                        var dayHistogram = histogram.find(function (a) {
                            return parseInt(moment(a.date).format('D')) == i;
                        });
                        if (dayHistogram) {
                            arr.push([moment(dayHistogram.date).format('D'), dayHistogram.sales, dayHistogram.discounts]);
                        } else {
                            arr.push([i.toString(), 0, 0]);
                        }
                    }
                } else if (dateType == 'thismonth-tab') {
                    var _startDate = parseInt(moment().startOf("month").format('D'));
                    var _endDate = parseInt(moment().endOf("month").format('D'));
                    for (var i = _startDate; i <= _endDate; i++) {
                        var dayHistogram = histogram.find(function (a) {
                            return parseInt(moment(a.date).format('D')) == i;
                        });
                        if (dayHistogram) {
                            arr.push([moment(dayHistogram.date).format('D'), dayHistogram.sales, dayHistogram.discounts]);
                        } else {
                            arr.push([i.toString(), 0, 0]);
                        }
                    }
                } else {
                    histogram.forEach(function (bin) {
                        arr.push([bin.date, bin.sales, bin.discounts]);
                    });
                }
                var options = {
                    title: 'Company Performance',
                    legend: {
                        position: 'bottom'
                    },
                    trendlines: {
                        0: { type: 'linear', lineWidth: 5, opacity: .3 },
                        1: { type: 'exponential', lineWidth: 10, opacity: .3 }
                    },
                    animation: {
                        startup: true,
                        duration: 800,
                        easing: 'inAndOut'
                    },
                    backgroundColor: 'transparent'
                };

                var chart = new google.visualization.ColumnChart(document.getElementById('performance-chart'));

                chart.draw(google.visualization.arrayToDataTable(arr), options);
            }

            var drawChart = function () {
                var arr = [
                    ['Date', 'Sales', 'Discounts']
                ];
                histogram.forEach(function (bin) {
                    arr.push([moment(bin.date).format("DD"), bin.sales, bin.discounts]);
                });

                var options = {
                    title: 'Company Performance',
                    legend: {
                        position: 'bottom'
                    },
                    animation: {
                        startup: true,
                        duration: 1200,
                        easing: 'inAndOut'
                    },
                    backgroundColor: 'transparent'
                };

                var chart = new google.visualization.ColumnChart(document.getElementById('performance-chart'));

                chart.draw(google.visualization.arrayToDataTable(arr), options);
            }

            var onGoogleChartsReady = function () {
                loadDashboard();
            };

            var onDaterangeChange = function (start, end, label) {
                startDate = start;
                endDate = end;
                loadDashboard("calender-tab");
            };

            var onProDaterangeChange = function (start, end, label) {
                startProDate = start;
                endProDate = end;
                loadProductsList();
            }

            var initDaterangePicker = function () {
                $('#dashboard-daterange-picker').daterangepicker({
                    startDate: startDate,
                    endDate: endDate,
                    maxDate: endDate
                }, onDaterangeChange);
                $('#dashboard-product-daterange-picker').daterangepicker({
                    startDate: startProDate,
                    endDate: endProDate
                }, onProDaterangeChange);
            };

            var init = function () {
                startDate = moment().startOf("month");
                endDate = moment().endOf('month');
                startProDate = moment();
                endProDate = moment().endOf('month');
                initDaterangePicker();
                google.charts.load('current', {
                    'packages': ['corechart']
                });
                google.charts.setOnLoadCallback(loadDashboard);
                loadProductsList();
            };

            init();
        }
    };
}]);
'use strict';
dashboard.controller("dashboardController", ["$rootScope", "$scope", function ($rootScope, $scope) {
    $rootScope.title = "Dashboard";

    var init = function () {

    };
    init();
}]);
'use strict';
dashboard.directive('memberDashboard', ["$state", function ($state) {
    return {
        templateUrl: 'ng/modules/dashboard/member-dashboard.html',
        scope: {},
        controller: function ($scope) {

        }
    };
}]);
'use strict';
admin.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $stateProvider
        .state('sales', {
            url: '/sales',
            templateUrl: 'ng/modules/admin/sales/view.html',
            controller: "salesController"
        })
        .state('browse-subscriptions', {
            url: '/browse-subscriptions',
            templateUrl: 'ng/modules/admin/subscriptions/view.html',
            controller: "subscriptionsBrowserController"
        })
        .state('members', {
            url: '/members',
            templateUrl: 'ng/modules/admin/members/view.html',
            controller: "membersController"
        })
        .state('member', {
            url: '/members/:id/profile',
            templateUrl: 'ng/modules/admin/member/view.html',
            controller: "memberController"
        })
        .state('partners', {
            url: '/partners',
            templateUrl: 'ng/modules/admin/partners/view.html',
            controller: "partnersController"
        })
        .state('profile', {
            url: '/:id/profile',
            templateUrl: 'ng/modules/admin/profile/view.html',
            controller: "profileController"
        })
        .state('stores', {
            url: '/stores',
            templateUrl: 'ng/modules/admin/stores/view.html',
            controller: "storesController"
        })
        .state('discounts', {
            url: '/discounts',
            templateUrl: 'ng/modules/admin/discounts/view.html',
            controller: "discountsController"
        })
        .state('categories', {
            url: '/categories',
            templateUrl: 'ng/modules/admin/categories/view.html',
            controller: "categoriesController"
        })
        .state('products', {
            url: '/products',
            templateUrl: 'ng/modules/admin/products/view.html',
            controller: "productsController"
        })
        .state('pages', {
            url: '/pages',
            templateUrl: 'ng/modules/admin/pages/view.html',
            controller: "pagesController"
        })
        .state('page', {
            url: '/pages/:handle/edit',
            templateUrl: 'ng/modules/admin/page/view.html',
            controller: "pageController"
        })
        .state('settings', {
            url: '/settings',
            templateUrl: 'ng/modules/admin/settings/view.html',
            controller: "settingsController"
        });
}]);
'use strict';
members.config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {
    $stateProvider
        .state('orders', {
            url: '/orders',
            templateUrl: 'ng/modules/members/orders/view.html',
            controller: "ordersController"
        })
        .state('one-time-transactions', {
            url: '/one-time-transactions',
            templateUrl: 'ng/modules/members/one-time-transactions/view.html',
            controller: "oneTimeTransactionsController"
        })

        .state('subscriptions', {
            url: '/subscriptions',
            templateUrl: 'ng/modules/members/subscriptions/view.html',
            controller: "subscriptionsController"
        })
        .state('package-tracking', {
            url: '/package-tracking',
            templateUrl: 'ng/modules/members/package-tracking/view.html',
            controller: "packageTrackingController"
        })
        .state('member-settings', {
            url: '/member-settings',
            templateUrl: 'ng/modules/members/settings/view.html',
            controller: "memberSettingsController"
        })
        .state('partner', {
            url: '/partner',
            templateUrl: 'ng/modules/members/partner/view.html',
            controller: "partnerController"
        })
        .state('partlogo', {
            url: '/partlogo',
            templateUrl: 'ng/modules/members/partner/partner-logo.html',
            controller: "partnerController"
        })
        .state('buildings', {
            url: '/buildings',
            templateUrl: 'ng/modules/members/buildings/view.html',
            controller: "buildingsController"
        })
        .state('building', {
            url: '/buildings/:id',
            templateUrl: 'ng/modules/members/building/view.html',
            controller: "buildingController"
        });
}]);
'use strict';
barefilterApp.run(['$rootScope', '$location', 'usersService',
    function ($rootScope, $location, usersService) {
        var path = "";
        $rootScope.$on('$locationChangeStart', function (event, next, current) {
            path = $location.path();
        });
        $rootScope.isBrowsing = function (_path) {
            return (_path === "dashboard" && path === "/") ? true : path.includes(_path);
        };
        $rootScope.isAdmin = function () {
            return usersService.isAdmin();
        };
        $rootScope.isPartner = function () {
            return usersService.isPartner();
        };
        $rootScope.isMember = function () {
            return usersService.isMember();
        };
    }
]);